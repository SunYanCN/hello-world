# 进入mysql命令行：
gswewf@gswewf-pc:~$ mysql -u root -p
Enter password:
或者：
zy@ubuntu:~$ mysql -h localhost -uroot -p

# MySQL 可以用localhost 连接，但不能用IP连接的问题:
解决：mysql安装完后，默认是root用户，root用户只能在服务器登录,需要分配新用户。

1.以root用户登陆mysql数据库。

2.执行一下命令分配新用户:
mysql> grant all privileges on *.* to root@192.168.3.103 identified by '123456';
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql> flush privileges;
Query OK, 0 rows affected (0.00 sec)

mysql> exit
Bye
grant all privileges on *.* to '用户名'@'IP地址' identified by '密码';
'all privileges ':所有权限 也可以写成 select ,update等。
*.* 所有库的所有表 如 databasename.*。
IP  数据库所在的IP。
identified by ‘密码’ 表示通过密码连接。
3.执行完上述命令后用下面的命令刷新一下权限
mysql> flush privileges;
Query OK, 0 rows affected (0.00 sec)


flush privileges;
4.修改my.conf配置
zy@ubuntu:~$ sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf
[mysqld] ... bind_address=127.0.0.1 # 屏蔽掉该处 ...
5.重新启动mysql
5.1.启动：输入 zy@ubuntu:~$ sudo /etc/init.d/mysql start
5.2.停止：输入 zy@ubuntu:~$ sudo /etc/init.d/mysql stop
不能直接重启(restart:zy@ubuntu:~$ sudo /etc/init.d/mysql restart)MySQL，只能先停止，再启动。

MySQL> grant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by ‘连接口令’;

权限1,权限2,…权限n代表select,insert,update,delete,create,drop,index,alter,grant,references,reload,shutdown,process,file等14个权限。
当权限1,权限2,…权限n被all privileges或者all代替，表示赋予用户全部权限。
当数据库名称.表名称被*.*代替，表示赋予用户操作服务器上所有数据库所有表的权限。
用户地址可以是localhost，也可以是ip地址、机器名字、域名。也可以用’%'表示从任何地址连接。
‘连接口令’不能为空，否则创建失败。
 
mysql>grant select,insert,update,delete,create,drop on vtdc.employee to joe@10.163.225.87 identified by ‘123′;
给来自10.163.225.87的用户joe分配可对数据库vtdc的employee表进行select,insert,update,delete,create,drop等操作的权限，并设定口令为123。

mysql> grant all privileges on yhb.* to root@'%' identified by '123456';
Query OK, 0 rows affected, 1 warning (0.00 sec)
允许来自所有主机的用户root分配可对数据库yhb所有表进行所有操作的权限，并设定口令为123456。

mysql>grant all privileges on *.* to joe@10.163.225.87 identified by ‘123′;
给来自10.163.225.87的用户joe分配可对所有数据库的所有表进行所有操作的权限，并设定口令为123。

mysql>grant all privileges on *.* to joe@localhost identified by ‘123′;
给本机用户joe分配可对所有数据库的所有表进行所有操作的权限，并设定口令为123。



# 查看字符编码：
mysql> show variables like 'character%';
ERROR 2006 (HY000): MySQL server has gone away
No connection. Trying to reconnect...
Connection id:    6
Current database: *** NONE ***

+--------------------------+----------------------------+
| Variable_name            | Value                      |
+--------------------------+----------------------------+
| character_set_client     | utf8                       |
| character_set_connection | utf8                       |
| character_set_database   | utf8                       |
| character_set_filesystem | binary                     |
| character_set_results    | utf8                       |
| character_set_server     | utf8                       |
| character_set_system     | utf8                       |
| character_sets_dir       | /usr/share/mysql/charsets/ |
+--------------------------+----------------------------+
8 rows in set (0.01 sec)

# 查看有哪些数据库：
mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.01 sec)

# 打开数据库you：
mysql> use you

# 查看当前数据库有哪些表：
mysql> show tables;
+---------------------+
| Tables_in_yhb |
+---------------------+
| LykActive_all       |
| class_member        |
| importinfo          |
| new_question_old    |
| python_tstamps      |
| synonyms            |
| yhb_qa              |
+---------------------+

# 重命名表(将表名new_question_old 改为 new_question)：
mysql> rename table new_question_old to new_question;

# 查看表yhb_qa的详细结构：
mysql> desc yhb_qa;
+-------------+-------------+------+-----+-------------------+-----------------------------+
| Field       | Type        | Null | Key | Default           | Extra                       |
+-------------+-------------+------+-----+-------------------+-----------------------------+
| id          | int(10)     | NO   | PRI | NULL              | auto_increment              |
| qa_id       | int(10)     | NO   |     | NULL              |                             |
| uid         | varchar(20) | YES  |     | NULL              |                             |
| question    | text        | NO   |     | NULL              |                             |
| answer      | text        | NO   |     | NULL              |                             |
| is_standard | tinyint(1)  | YES  |     | NULL              |                             |
| tag1        | tinytext    | YES  |     | NULL              |                             |
| tag2        | tinytext    | YES  |     | NULL              |                             |
| create_time | datetime    | NO   |     | NULL              |                             |
| modify_time | timestamp   | NO   |     | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |
+-------------+-------------+------+-----+-------------------+-----------------------------+
10 rows in set (0.00 sec)

# 显示表yhb_qa的前5条记录
mysql> SELECT   *   FROM   yhb_qa   LIMIT   5;       
+----+-------+-------------+--------------+--------+-------------+-----------+--------+---------------------+---------------------+
| id | qa_id | uid         | question     | answer | is_standard | tag1      | tag2   | create_time         | modify_time         |
+----+-------+-------------+--------------+--------+-------------+-----------+--------+---------------------+---------------------+
|  1 |   123 | 123.12.8.12 | 你在干嘛     | 你猜   |           1 | 资讯类    | 投诉   | 2017-04-01 14:10:38 | 2017-04-01 14:10:38 |
+----+-------+-------------+--------------+--------+-------------+-----------+--------+---------------------+---------------------+
1 row in set (0.00 sec)

# 查询某一区间内的数据（以下三种方法查询结果是一致的）：
１、        SELECT * from yhb_qa WHERE id >= 740 and id<=742
２、        SELECT * from yhb_qa WHERE id in (740, 741, 742)
３、        SELECT * from yhb_qa WHERE id BETWEEN 740 and 742

＃查询第10~20条记录：
方法１：先正查，再反查
SELECT * from (select * from yhb_qa order by id asc limit 20) a ORDER BY id desc LIMIT 10;

方法２：使用left join(说明：left join,（或left outer join:在Mysql中两者等价）左连接从左表(A)产生一套完整的记录,与匹配的记录(右表(B)) .如果没有匹配,右侧将包含null。)
select  A.* from yhb_qa A 
left outer join (select  * from yhb_qa order by id asc LIMIT 20) B 
on A.id = B.id 
where B.id is null 
order by A.id asc LIMIT 10

方法3:使用not in 
select  * from yhb_qa 
where id not in 
(SELECT id from (select  id from yhb_qa order by id asc LIMIT 20) as t)
order by id asc  LIMIT 10


字符串查找：
１、模糊匹配
通过“标题”对新闻库进行检索，关键字可能包含是中英文，如下SQL语句：
select id,title,name from achech_com.news where title like '%a%'

返回的结果，某些title字段确定带了“a”关键字，而有些则只有中文，但也随之返回在检索结果中。
解决方法，使用 BINARY 属性进行检索（将属性指定为 BINARY ，以精确检索结果）：
select id,title,name from achech_com.news where binary title like '%a%'
返回的结果较之前正确，但英文字母区分大小写，故有时在检索如“Achech”及“achech”的结果是不一样的。知道了使用 BINARY 属性可以解决前面这个问题，再看看 MySQL 支持的UCASE 及 CONCAT 函数，其中 UCASE 是将英文全部转成大写，而CONCAT函数的作用是对字符进行连接，以下是完全解决后的SQL 语句：
select id,title,name from achech_com.news where binary ucase(title) like concat('%',ucase('a'),'%')
被 like 的 title内容存在大小写字母的可能，故先使用 ucase 函数将字段内容全部转换成大写字母，然后再进行 like 操作，而 like 的操作使用模糊方法，使用 concat的好处是传进来的可以是直接的关键字，不需要带“%”万用符，将“'a'”直接换成你的变量。当然你也可以这么写：
select id,title,name from achech_com.news where binary ucase(title) like ucase('%a%')

Mysql Left Join Where On
 
select t1.id,t2.id from t1 left join t2 on t1.id = t2.id and t1.id>1 and t2.id<>3
在mysql的left join中条件放在on后面和在where后面是不同的；
1. on后面只针对于t2表进行过滤，所以上面的t1.id>1将不起作用;
2. where后面会对最终结果产生影响，所以如果t2.id<>3放到on后面和where后面也是会返回不同的结果；


数据的批量替换：
方法１，　先删除，再插入（对重复的记录先delete 后insert，如果更新的字段不全会将缺失的字段置为缺省值，故用这个若不小心则可能清空大量数据。）：
replace into test_tbl (id,dr) values (1,'2'),(2,'3'),...(x,'y');
方法２，insert into ...on duplicate key update批量更新（insert into 则是只update重复记录，不会改变其它字段。）
insert into test_tbl (id,dr) values (1,'2'),(2,'3'),...(x,'y') on duplicate key update dr=values(dr);
举个例子，字段a被定义为UNIQUE，并且原数据库表table中已存在记录(2,2,9)和(3,2,1)，如果插入记录的a值与原有记录重复，则更新原有记录，否则插入新行： 
INSERT INTO TABLE (a,b,c) VALUES 
(1,2,3), 
(2,5,7), 
(3,3,6), 
(4,8,2) 
ON DUPLICATE KEY UPDATE b=VALUES(b); 
以上SQL语句的执行，发现(2,5,7)中的a与原有记录(2,2,9)发生唯一值冲突，则执行ON DUPLICATE KEY UPDATE，将原有记录(2,2,9)更新成(2,5,9)，将(3,2,1)更新成(3,3,1)，插入新记录(1,2,3)和(4,8,2) 
以下两个语句具有相同的效果：
INSERT INTO `table` (`a`, `b`, `c`) VALUES (1, 2, 3) ON DUPLICATE KEY UPDATE `c`=`c`+1; 
UPDATE `table` SET `c`=`c`+1 WHERE `a`=1;

REPLACE语句和INSERT语句用法非常相似，唯一的区别就是，在一个UNIQUE索引或PRIMARY KEY中出现重复值的时候，REPLACE会先删除旧行后再插入新行，INSERT语句则报错。
如果数据表没有使用PRIMARY KEY或UNIQUE索引，则REPLACE与INSERT语句完全一样。

# 删除数据表class_member的全部数据，但保留表结构（字段名、字段值类型等）；
mysql> truncate TABLE class_member;

# 清空表数据（表结构还保留，仅仅清空数据）：
TRUNCATE TABLE 表格名;

# 更新数据：
UPDATE question SET tag1=65 WHERE answer LIKE "%能赔偿"

# 如果要清空表中的所有记录，可以使用下面的两种方法：
　　DELETE FROM table1
　　TRUNCATE TABLE table1
# 其中第二条记录中的TABLE是可选的。

# 如果要删除表中的部分记录，只能使用DELETE语句
DELETE FROM question WHERE  tag1=65

# 查找替换
## 将将表 entity里面的 similar_word字段的'、'替换为‘,’ 
UPDATE entity SET similar_word=REPLACE(similar_word, '、', ','); 

# 多个查询结果合并成一个：
     select a.*, b.* from(  SELECT id, database_table, schema_name, api_status
        FROM data_query
        ORDER BY id ASC limit 1,20)a,
        (select count(1) as userTotalCount from data_query)b ;  

# 修改字段注释：
ALTER TABLE table_log2 MODIFY COLUMN ip_name varchar(15) comment '新的公网IP地址';

