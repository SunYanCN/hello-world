
hive 求两个集合的差集
想要得到存在A中但是不存在B中的uid:
select a.uid from 
(select uid from tmp_zidali_500wan_fullinfo_new)a
left outer join
(select uid from temp_zidali_uid_num_maxvalue_rate)b
on a.uid=b.uid
where b.uid is null

外链接，求并集：
有三个表分别记录“宠物、养生、汽车”三类博主及其粉丝id，现在统计每个粉丝关注的各类博主数量：
select coalesce(cw.uid, ys.uid, qc.uid)as uid, cw.chongwu as chongwu, ys.yangsheng as yangsheng, qc.qiche as qiche
from (select uid, count(*) from db_name.chongwu_table group by uid)as cw
full outer join (select uid, count(*) from db_name.yangsheng_table group by uid) ys
on cw.uid=ys.uid
full outer join (select uid, count(*) from db_name.qiche_table group by uid) qc
on ys.uid=qc.uid;

# 内连接 inner join
内连接：只有进行连接的两个表中都存在与连接条件相匹配的数据才会被保留下来。
join默认是inner join, 如：
select * from teacher t inner join course c  on t.t_id = c.t_id;

# 左外连接 left outer join
左外连接：
join操作符“左边表中”符合where子句的所有记录将会被返回。
右边表的指定字段没有符合条件的值的话，那么就使用null值替代。
案例实操：查询老师对应的课程
select * from teacher t left outer join course c on t.t_id = c.t_id;

# 右外连接 right outer join
右外连接：
join操作符“右边表中”符合where子句的所有记录将会被返回。
左边表的指定字段没有符合条件的值的话，那么就使用null值替代。
案例实操
select * from teacher t right outer join course c on t.t_id = c.t_id;

# 满外连接 full outer join
满外连接：
将会返回“所有表中”符合where语句条件的所有记录，实际上是取关联字段的并集。
如果任一表的指定字段没有符合条件的值的话，那么就使用null值替代。
案例实操
select * from teacher t full outer join course c on t.t_id = c.t_id;

# 多表连接
多个表使用join进行连接
注意：连接 n个表，至少需要n-1个连接条件。例如：连接三个表，至少需要两个连接条件。
案例实操
select * from teacher t
left join course c on t.t_id = c.t_id
left join score s on c.c_id = s.c_id
left join stu on s.s_id = stu.id;
多表连接查询，查询老师对应的课程，以及对应的分数，对应的学生

“把重复关联键少的表放在join前面做关联可以提高join的效率。”
写在关联左侧的表每有1条重复的关联键时底层就会多1次运算处理。
假设A表有一千万个id，平均每个id有3条重复值，那么把A表放在前面做关联就会多做三千万次的运算处理，这时候谁写在前谁写在后就看出性能的差别来了。


非空查找函数：
语法: COALESCE(T v1, T v2, …)
说明: 返回参数中的第一个非空值，从左到右返回第一个不为NULL的值，如果所有值都为NULL，那么返回NULL。

