

默认情况下，clickhouse-server会在8123端口上监控HTTP请求



(DEV)[root@SZD-L0484943 test_clickhouse]# echo 'CREATE TABLE t (a UInt8) ENGINE = Memory' | curl 'http://localhost:8123/' --data-binary @-
(DEV)[root@SZD-L0484943 test_clickhouse]# echo 'INSERT INTO t VALUES (1),(2),(3)' | curl 'http://localhost:8123/' --data-binary @-
(DEV)[root@SZD-L0484943 test_clickhouse]# echo '(4),(5),(6)' | curl 'http://localhost:8123/?query=INSERT%20INTO%20t%20VALUES' --data-binary @-

从表中读取内容。由于查询处理是并行的，数据以随机顺序输出。

$ curl 'http://localhost:8123/?query=SELECT%20a%20FROM%20t'
或者：
echo 'SELECT a FROM t' | curl 'http://localhost:8123/' --data-binary @-

删除表：
echo 'DROP TABLE t' | curl 'http://localhost:8123/' --data-binary @-

创建库：
echo "CREATE DATABASE IF NOT EXISTS tutorial" | curl 'http://localhost:8123/' --data-binary @-

将建表语句写在sql文件中，通过读取文件，创建表：
cat create_hits_v1.sql  | curl 'http://localhost:8123/' --data-binary @-

建表语句除了基本形式外，还有两个扩展形式：
CREATE [TEMPORARY] TABLE [IF NOT EXISTS] [db.]name
(
 name1 [type1] [DEFAULT | MATERIALIZED | ALIAS expr1],
 name2 [type2] [DEFAULT | MATERIALIZED | ALIAS expr2],
 ...
) ENGINE = engine
这是基本形式，如果引擎支持索引的话，索引可以在 ENGINE 的地方额外设置。
 
CREATE [TEMPORARY] TABLE [IF NOT EXISTS] [db.]name AS [db2.]name2 [ENGINE = engine] 
第一种扩展形式，可以创建一个跟指定表完全一样的表，但是可以更换不同的引擎。创建表name,但字段结构采用name2的；

CREATE [TEMPORARY] TABLE [IF NOT EXISTS] [db.]name ENGINE = engine AS SELECT ... 
这种形式是“建表并填充”，表字段会自动根据 SELECT 的返回内容设置，并且，返回内容会作为新表内容填充进去。创建表name,但字段结构采用select查询的结果。


将文件的前10行写入表t：
echo 'CREATE TABLE t (a String) ENGINE = Memory' | curl 'http://localhost:8123/' --data-binary @-
head demand_side_id.txt | curl 'http://localhost:8123/?query=INSERT%20INTO%20t%20FORMAT%20TabSeparated' --data-binary @-

若要插入tab分割的数据，需要指定对应的格式：

$ echo -ne '10\n11\n12\n' | curl 'http://localhost:8123/?query=INSERT%20INTO%20t%20FORMAT%20TabSeparated' --data-binary @-

clickhouse-client --query "INSERT INTO tutorial.hits_v1 FORMAT TSV" --max_insert_block_size=100000 < hits_v1.tsv
clickhouse-client --query "INSERT INTO tutorial.visits_v1 FORMAT TSV" --max_insert_block_size=100000 < visits_v1.tsv

上客户端写入数据，也可改为下面的http方法：
cat visits_v1.tsv | curl 'http://localhost:8123/?query=INSERT%20INTO%20tutorial.visits_v1%20FORMAT%20TabSeparated&max_insert_block_size=100000' --data-binary @-
time cat hits_v1.tsv | curl 'http://localhost:8123/?query=INSERT%20INTO%20tutorial.hits_v1%20FORMAT%20TabSeparated&max_insert_block_size=100000' --data-binary @-

(DEV)[root@SZD-L0484943 test_data]# time echo "select count(1) from tutorial.visits_v1 " | curl 'http://localhost:8123/' --data-binary @-
1681881

real    0m0.018s
user    0m0.004s
sys     0m0.006s


(DEV)[root@SZD-L0484943 test_data]# unxz hits_v1.tsv.xz
(DEV)[root@SZD-L0484943 test_data]# time cat hits_v1.tsv | curl 'http://localhost:8123/?query=INSERT%20INTO%20tutorial.hits_v1%20FORMAT%20TabSeparated&max_insert_block_size=100000' --data-binary @-

real    1m55.355s
user    0m3.645s
sys     0m28.799s
(DEV)[root@SZD-L0484943 test_data]# du -sh *
32M     demand_side_id.txt
7.3G    hits_v1.tsv
315M    supply_side_id.txt
2.5G    visits_v1.tsv
(DEV)[root@SZD-L0484943 test_data]# time echo "select count(1) from tutorial.hits_v1 " | curl 'http://localhost:8123/' --data-binary @-
8873898

real    0m0.278s
user    0m0.004s
sys     0m0.011s


用户名和密码可以通过以下三种方式指定：

通过HTTP Basic Authentication。示例：
$ echo 'SELECT 1' | curl 'http://user:password@localhost:8123/' -d @-
通过URL参数中的user和password。示例：
$ echo 'SELECT 1' | curl 'http://localhost:8123/?user=user&password=password' -d @-
使用X-ClickHouse-User或X-ClickHouse-Key头指定，示例:
$ echo 'SELECT 1' | curl -H 'X-ClickHouse-User: user' -H 'X-ClickHouse-Key: password' 'http://localhost:8123/' -d @-

# 带参数查询：
curl -sS "http://localhost:8123/?param_id=45&param_phrase=gruzomoy.sumtel.com.ua" -d "SELECT count(*) FROM tutorial.visits_v1 WHERE CounterID = {id:UInt8} and StartURLDomain = {phrase:String}"

# 查询数据：
curl 'http://localhost:8123/' -d "select ClientIP, UserID,RemoteIP,SearchPhrase SearchPhrase from tutorial.hits_v1 limit 10"


echo 'CREATE TABLE tutorial.demand_side (`demand_id` String, `EventDate` Date) ENGINE = MergeTree() PARTITION BY toYYYYMM(EventDate) ORDER BY (EventDate, xxHash32(demand_id)) ' | curl 'http://localhost:8123/' --data-binary @-
echo 'CREATE TABLE tutorial.supply_side (`supply_id` String, `EventDate` Date) ENGINE = MergeTree() PARTITION BY toYYYYMM(EventDate) ORDER BY (EventDate, xxHash32(supply_id)) ' | curl 'http://localhost:8123/' --data-binary @-

如果要在除了'b'列以外的所有列中插入数据，您需要传递和括号中选择的列数一样多的值:
INSERT INTO insert_select_testtable (* EXCEPT(b)) Values (2, 2);

less demand_side_id.txt | curl 'http://localhost:8123/?query=INSERT%20INTO%20tutorial.demand_side%20(demand_id)%20FORMAT%20TabSeparated' --data-binary @-

求解交集的个数：
echo "SELECT length(bitmapToArray(bitmapAnd(bitmapBuild([1,2,3]),bitmapBuild([3,4,5])))) AS res"  | curl 'http://localhost:8123/' --data-binary @-
bitmapBuild：从无符号整数数组构建位图对象
bitmapAnd：为两个位图对象进行与操作，返回一个新的位图对象。即求交集。
bitmapToArray：将位图转换为整数数组。
length： 输出整数列表的长度；

# 查询结果，指定列的内容, 如给第三列赋值：
time curl 'http://localhost:8124/' -d "select mid, tag, 'tb2' from tutorial_test_tb2 limit 5";
主要注意的是，curl命令-d参数中，双引号、单引号都是可以的，但也有例外，如上例中单引号对应的字符串，才是对应的字符串，若换成双引号会报错;
同样的，下面例子中，尖引号，若是在单引号中，则不报错，若是在双引号中则会报错(command not found)；
curl localhost:8123 -d "CREATE TABLE default.parquet_test_tb1
(
    `mid` String,
    `tag` String,
    `db_table` String
)
ENGINE = HDFS('hdfs://12.45.23.12:9001/user/hive/warehouse/parquet_test_tb1/*', 'Parquet')";
需要改为：
curl localhost:8123 -d "CREATE TABLE tutorial.parquet_test_tb6
(
    mid String,
    tag UInt8,
    db_table UInt16
)
ENGINE = HDFS('hdfs://12.45.23.12:9001/user/hive/warehouse/test_tb6/*', 'Parquet')"

# 带settings参数查询,如：
> set max_bytes_before_external_group_by=10000000000;
> select id from sync_big_table_150000000_id group by id limit 10;
curl 'localhost:8124?max_bytes_before_external_group_by=10000000000' -d "select id from sync_big_table_150000000_id group by id limit 10"


