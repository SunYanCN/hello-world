
# 问题有时候启动服务报错：
Running on local URL:  http://0.0.0.0:7860

Could not create share link. Missing file: /usr/local/lib/python3.10/site-packages/gradio/frpc_linux_amd64_v0.2. 

Please check your internet connection. This can happen if your antivirus software blocks the download of this file. You can install manually by following these steps: 

1. Download this file: https://cdn-media.huggingface.co/frpc-gradio-0.2/frpc_linux_amd64
2. Rename the downloaded file to: frpc_linux_amd64_v0.2
3. Move the file to this location: /usr/local/lib/python3.10/site-packages/gradio
按照上面操作，却发现cdn-media.huggingface.co国内无法打开
解决方法：可通过下面的项目获取对应的文件；
git clone https://github.com/Dust-Catcher/gradio.git

# 问题：因输入内容有特殊字符，导致输入聊天文本在页面上没有展示出来，怎么解决：
比如 输入 险种四大赛道 <prod_line_label>是啥，在页面上面仅仅展示：险种四大赛道
问题根源：
当输入中出现类似 <prod_line_label> 的结构时：
Gradio 的 Chatbot 组件默认会将消息内容渲染为 HTML
前端会将 <prod_line_label> 识别为未闭合的 HTML 标签
浏览器会隐藏后续内容（因为认为标签未闭合）
解决方法：
Markdown 代码块包裹
通过 ``` 包裹内容，强制以纯文本形式渲染，避免 HTML 标签解析：
formatted_msg = f"```\n{user_message}\n```"
前端会渲染为代码块样式，但保留了原始符号
def user(user_message, history):
    # 用代码块包裹用户输入（保留所有符号）
    formatted_msg = f"```\n{user_message}\n```"
    return "", history + [[formatted_msg, None]]

def bot(model_name, history, request: gr.Request):
    user_id = request.session_hash
    start_time = time.time()
    logger.info(f"用户ID：{user_id}，请求的问题：{history[-1][0]}")

    answerStr = ""
    for answer_chunk in 请求大模型的流式结果:
        # 用代码块包裹每个响应片段
        formatted_chunk = f"```\n{answer_chunk}\n```"
        history[-1][1] += formatted_chunk
        answerStr += answer_chunk
        yield history

    logger.info(f"用户ID：{user_id}，结果：{answerStr}")

with gr.Blocks() as demo:
    chatbot = gr.Chatbot(
        label='DeepSeek模型问答对话框',
        height=700,
        render_markdown=True,
        sanitize_html=False,
        elem_id="chatbot"
    )
    # 其他组件保持不变...

demo.queue(status_update_rate="auto", default_concurrency_limit=120, max_size=120)
demo.launch(server_name='0.0.0.0', server_port=7860, share=True)

# Jupyter Notebook 或 IPython 环境中运行 uvicorn.run() 时常见的问题:
RuntimeError: asyncio.run() cannot be called from a running event loop
错误原因分析：
Python 的 asyncio.run() 函数只能在一个没有事件循环（event loop）的环境中调用。但在 Jupyter Notebook 或 IPython 中，已经有一个事件循环在运行了（通常是 nest_asyncio.apply() 或 IPython 自带的事件循环），所以当你调用：
uvicorn.run(app, host="0.0.0.0", port=7860)
实际上内部调用了 asyncio.run()，就会抛出这个异常。
✅ 解决方案
如果你是在 Jupyter Notebook 中运行 Gradio + Uvicorn 的组合，可以使用 nest_asyncio 来解决嵌套事件循环的问题。
步骤如下：
安装 nest_asyncio：
pip install nest_asyncio
在代码开头添加：
import nest_asyncio
nest_asyncio.apply()
然后正常运行你的代码


