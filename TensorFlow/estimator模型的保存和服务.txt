estimator模型的保存和服务

estimator模型的保存
引入main.py中写好的model_fn，写一个输入接收器函数serving_input_receiver_fn后，estimator.export_saved_model。

DATADIR = '../../data/example'
PARAMS = './results/params.json'
MODELDIR = './results/model'


def serving_input_receiver_fn():
    """Serving input_fn that builds features from placeholders
    Returns
    -------
    tf.estimator.export.ServingInputReceiver
    """
    words = tf.placeholder(dtype=tf.string, shape=[None, None], name='words')
    nwords = tf.placeholder(dtype=tf.int32, shape=[None], name='nwords')
    receiver_tensors = {'words': words, 'nwords': nwords}
    features = {'words': words, 'nwords': nwords}
    return tf.estimator.export.ServingInputReceiver(features, receiver_tensors)

def serving_input_receiver_fn():
    input_ids = tf.placeholder(dtype=tf.int64, shape=[None, FLAGS.max_seq_length], name='input_ids')
    input_mask = tf.placeholder(dtype=tf.int64, shape=[None, FLAGS.max_seq_length], name='input_mask')
    segment_ids = tf.placeholder(dtype=tf.int64, shape=[None, FLAGS.max_seq_length], name='segment_ids')
    label_ids = tf.placeholder(dtype=tf.int64, shape=[None,FLAGS.label_length], name='label_ids')

    receive_tensors = {'input_ids': input_ids, 'input_mask': input_mask, 'segment_ids': segment_ids,
                       'label_ids': label_ids}
    features = {'input_ids': input_ids, 'input_mask': input_mask, 'segment_ids': segment_ids, "label_ids": label_ids}
    return tf.estimator.export.ServingInputReceiver(features, receive_tensors)

if __name__ == '__main__':
    with open(PARAMS, 'r') as f:
        params = json.load(f)

    estimator = tf.estimator.Estimator(model_fn, MODELDIR, params=params)
    estimator.export_saved_model('saved_model', serving_input_receiver_fn)
estimator模型的服务
在export_dir中找到最新的输出模型，predictor.from_saved_model即可。

"""Reload and serve a saved model"""

import os
from tensorflow.contrib import predictor

params = {
    'lang': 'chn',
}
LINE = '输入的句子'
export_dir = 'saved_model'

if __name__ == '__main__':
    subdirs = [os.path.join(export_dir, x) for x in os.listdir(export_dir) if
               os.path.isdir(os.path.join(export_dir, x)) and 'temp' not in str(x)]
    latest = str(sorted(subdirs)[-1])
    predict_fn = predictor.from_saved_model(latest)

    if params['lang'] == 'chn':
        words = [w.encode('utf-8') for w in LINE.strip()]
    else:
        words = [w.encode() for w in LINE.strip().split()]

    nwords = len(words)
    predictions = predict_fn({'words': [words], 'nwords': [nwords]})
    print(predictions)
