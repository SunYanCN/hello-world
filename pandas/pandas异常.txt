
异常：pd.read_excel,读取excel数据时，字符串自动转换为数字：
解决方案1：设置converters
如：
df = pd.read_excel(yiyuan_excel_file, sheet_name="Sheet1", index_col=0, converters={'医院等级': str})

解决方案2：设置dtype
如：
df = pd.read_excel(yiyuan_excel_file, sheet_name="Sheet1", index_col=0, dtype={'医院等级': np.str})

但这两种方案，只能是针对excel数据中，本就是文本类型的数据；
若原excel中是自定义的`0000`类型的数据， 如0001，读取出来的结果仍旧是: "1".
当然，也可以设置dtype=object，这个时候不对数据进行转换；

import pandas 出现以下错误：
ImportError: Missing required dependencies ['numpy']
解决方法：
第一步，卸载numpy: pip3 uninstall numpy
第二步，卸载不彻底，删除安装目录：rm /usr/local/lib/python3.5/dist-packages/numpy/
第三步，重新安装numpy: pip3 install numpy==1.16.3 -i http://pypi.douban.com/simple --trusted-host=pypi.douban.com

用read_csv读取文件，报错：ParserError: Error tokenizing data. C error: EOF inside string starting at line 2
问题原因：当文本文件中带有英文双引号时，直接用pd.read_csv进行读取会导致行数减少
解决方案：
此时若我们使用error_bad_lines=False,虽说可以避免报错，但治标不治本；仅仅是忽略掉了读错的内容行而已，实际上原始数据是有丢失的
pd.read_csv(r'test.csv', sep=',', error_bad_lines=False, header=None, engine='python', encoding='utf-8')
此时正确做法应该对read_csv设置参数quoting=3或者quoting=csv.QUOTE_NONE (实际上csv.QUOTE_NONE=3)
pd.read_csv(r'test.csv', sep=',', quoting=csv.QUOTE_NONE, header=None, engine='python', encoding='utf-8')
在csv模块中，数据可能会用引号等字符包裹起来，quoting参数用来控制识别字段的引号模式，它可以是Python csv模块中的csv.QUOTE_*常量，也可以传入对应的数字。各个传入值的意义如下。
0或csv.QUOTE_MINIMAL：仅特殊字段有引号。
1或csv.QUOTE_ALL：所有字段都有引号。
2或csv.QUOTE_NONNUMERIC：所有非数字字段都有引号。
3或csv.QUOTE_NONE：所有字段都没有引号。

用read_csv读取文件，报错 OSError: Initializing from file failed
问题原因，读取的文件路径中有中文汉字；
解决方案，设置engine参数，如：
df = pd.read_csv(r'测试文件.txt', engine='python')

有时候用pandas保存数据到文件时，用df.to_excel会出现如下错误：
openpyxl.utils.exceptions.IllegalCharacterError
问题原因：
主要是因为保存数据中有非法字符所致；
ILLEGAL_CHARACTERS_RE = re.compile(r'[\000-\010]|[\013-\014]|[\016-\037]')
检测到excel中存在[\000-\010]|[\013-\014]|[\016-\037]这些非法的字符，因此可以将字符串中的非法字符替换掉即可，在重新写入excel即可。
解决方案：
方案1： text= ILLEGAL_CHARACTERS_RE.sub(r'', text)
方案2，使用xlsxwriter
import xlsxwriter
outputData.to_excel(outputExcelFilePath, engine='xlsxwriter')

有时候，pd.read_csv 读取文件会报错：
pandas.errors.ParserError: unexpected end of data
解决方法,补充 quoting 参数，如：
pd.read_csv(full_path, encoding='utf-8', quoting=csv.QUOTE_NONE)

# pandas根据索引取数据报错：
pandas.core.indexing.IndexingError: Unalignable boolean Series provided as indexer (index of the boolean Series and of the indexed object do not match).
原因是原始数据行数，与索引行数不匹配
dataframe = pd.DataFrame(data=np.random.random(size=(3, 5)), index=['a', 'b', 'c'])
dataframe.loc[pd.Series([True, True], index=['a', 'b']).index]

# 数据里头有特殊字符，比如换行符、分隔符等，导致存储数据，再读取的时候失败，这个时候，可以指定特殊分隔符，并设置所有字段都有引号：
df2.to_csv("./result_5520w.txt", encoding='utf-8', index=False, sep='\001', quoting=csv.QUOTE_ALL)
读取的时候，也是一样指定就好：
df = pd.read_csv("./result_5520w.txt", encoding='utf-8', sep='\001', quoting=csv.QUOTE_ALL)

# Python Console中，df.head(), 中文显示乱码，问号：
可能是Pychon Console配置问题，不管pandas的事，输入任何中文，输出都是乱码；
修改pycharm配置
FILE-》setting-》Editor-》File Encodings，Global Encoding, Project Encoding, Default encoding ...都修改为UTF-8，重启pycharm即可。

# Pycharm, Python Console中，df.head()报错：
‘NoneType‘ object is not callable
解决方案，是在pyCharm里代码中加入：
pd.set_option('display.max_columns', None)#所有列
pd.set_option('display.max_rows', None)#所有行
df.head()

# pandas 读取Excel出错：
xlrd.biffh.XLRDError: Excel xlsx file; not supported
可能是因为pandas版本太低，升级pandas版本，如：
pip3 install -U pandas==1.5.3

# pd.read_json报错：
ValueError: Protocol not known: 
原因
json里有参数值是"https://www.biadu.com"，也就是说json里含有 // 。
当把 // 这类参数值删除后，pd.read_json(json_demo) 正常。
根本原因（猜测）
Pandas 1.X中的pd.read_json()不再能读取简单的字符串，需进行格式之类的转换。
解决办法
from io import StringIO
df = pd.read_json(StringIO(json_demo))

# 问题 df.to_excel报内存错误，to_excel太耗内存：
MemoryError
因写入的数据量太大，导致报出“内存溢出”的错误。
解决方法
使用xlsxwriter模块将数据写入，代码更改为：
import pandas as pd
import numpy as np
import xlsxwriter
# 生成dataframe数据
df = pd.DataFrame(np.arange(12000000).reshape(300000,40))
# print(df)
writer = pd.ExcelWriter('test.xlsx', engine='xlsxwriter', options={'strings_to_urls':False})  # options参数可带可不带，根据实际情况
df.to_excel(writer, index=False)
writer.save()
更改后就不会报错了，xlsxwriter模块是一个python处理Excel写入的专有模块，不支持对Excel的读取，只支持写入，功能非常强大。

