datetime的格式是：
datetime.datetime(2014, 1, 5, 16, 47, 49)

>>> import time
>>> import datetime

string转换为datetime：
>>> string = '2014-01-08 11:59:58'
>>> time1 = datetime.datetime.strptime(string,'%Y-%m-%d %H:%M:%S')
>>> print time1
2014-01-08 11:59:58

时间的加减：
>>> last = time1 - datetime.timedelta(hours = 24)
>>> next_dat = time1 + datetime.timedelta(days=1, hours=23, minutes=59, seconds=59, microseconds=999999)
>>> print last
2014-01-07 11:59:58
>>> next_dat
datetime.datetime(2014, 1, 10, 11, 59, 57, 999999)
>>> print next_dat
2014-01-10 11:59:57.999999
>>> str(last)
'2014-01-07 11:59:58'

时间日期加减，相对加减，绝对加减：
from dateutil.relativedelta import relativedelta
datetime.now()
Out[46]: datetime.datetime(2021, 6, 18, 16, 9, 11, 415495)
datetime.now() - relativedelta(years=1, months=2, days=3, hours=1, minutes=2, seconds=3, microseconds=9999)
Out[47]: datetime.datetime(2020, 4, 15, 15, 7, 11, 308338)
datetime.now() - relativedelta(year=1, month=2, day=3, hour=1, minute=2, second=3, microsecond=9999)
Out[48]: datetime.datetime(1, 2, 3, 1, 2, 3, 9999)

# 两个时间相差总秒数：
(datetime.strptime( '2020-07-25 19:30:02', '%Y-%m-%d %H:%M:%S')-datetime.strptime( '2020-07-25 19:30:03', '%Y-%m-%d %H:%M:%S')).total_seconds()

# 直接设置为某时间点：
>>> datetime.datetime(month=2, year=2021, day=25, hour=23, minute=59, second=59, microsecond=999999)
Out[26]: datetime.datetime(2021, 2, 25, 23, 59, 59, 999999)

datetime转为字符串：
>>> time1_str = datetime.datetime.strftime(time1,'%Y-%m-%d %H:%M:%S')
>>> time1_str
'2014-01-08 11:59:58'

python获取当前时间：
time.time() 获取当前时间戳
time.localtime() 当前时间的struct_time形式
time.ctime() 当前时间的字符串形式
>>> time.time()
1389243184.696
>>> time.localtime()
time.struct_time(tm_year=2014, tm_mon=1, tm_mday=9, tm_hour=12, tm_min=53, tm_sec=13, tm_wday=3, tm_yday=9, tm_isdst=0)
>>> time.ctime()
'Thu Jan 09 12:53:19 2014'
#获取当前时间
time_now = int(time.time())
#转换成localtime
time.localtime(time_now)
Out[3]: time.struct_time(tm_year=2018, tm_mon=1, tm_mday=11, tm_hour=8, tm_min=51, tm_sec=28, tm_wday=3, tm_yday=11, tm_isdst=0)

# time格式转换为datetime格式：
datetime.datetime.fromtimestamp(time.time())  
Out[5]: datetime.datetime(2018, 1, 11, 8, 53, 59, 977699)

# datetime格式转为time格式:
print(time.mktime(datetime.datetime.now().timetuple()))
print(time.time())
1515632319.0
1515632319.1558268

time转换为字符串：
>>> time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(time.time()))
'2014-01-09 12:59:00'
>>> time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
'2014-01-09 12:59:00'
>>> time.strftime("%a %b %d %H:%M:%S %Y", time.localtime())
'Thu Jan 09 13:01:00 2014'
In[12]: datetime.strftime(datetime.now(),'%Y-%m-%d %H:%M:%S %f')
Out[12]: '2017-04-14 14:56:09 093717'

# string 转换为time：
>>> a = "Sat Mar 28 22:24:24 2009"
>>> b = time.mktime(time.strptime(a,"%a %b %d %H:%M:%S %Y"))
>>> b
1238250264.0
# 若需要毫秒级的精度不丢失，需要如下转换：
>>> datetime_obj = datetime.strptime('2020-02-27 20:31:57,609',"%Y-%m-%d %H:%M:%S,%f")
>>> datetime_obj
datetime.datetime(2020, 2, 27, 20, 31, 57, 609000)
>>> time.mktime(datetime_obj.timetuple()) + datetime_obj.microsecond / 1e6
1582806717.609

datetime转化为时间戳：
>>> time.mktime(datetime.datetime(2014,1,8,11,59,58).timetuple())
1389153598.0

# string -> numpy.datetime64
np.datetime64('2020-10-06T00:00:00.000000000')
Out[285]: numpy.datetime64('2020-10-06T00:00:00.000000000')
np.datetime64('2020-10-06')
Out[286]: numpy.datetime64('2020-10-06')

# numpy.datetime64 -> datetime
不同np.datetime64转换结果竟然不一致
np.datetime64('2020-10-06T00:00:00.000000000').astype(datetime)
Out[283]: 1601942400000000000
np.datetime64('2020-10-06T00:00:00.0000').astype(datetime)
Out[284]: datetime.datetime(2020, 10, 6, 0, 0)
通过下面转换的话，竟然差了8个时差；
datetime.fromtimestamp(np.datetime64('2020-10-06T00:00:00.000000000').astype(datetime)/1e9)
Out[288]: datetime.datetime(2020, 10, 6, 8, 0)
这是因为 fromtimestamp 该函数的转化是根据本地的时区来的
import pytz
datetime.fromtimestamp(np.datetime64('2020-10-06T00:00:00.000000000').astype(datetime)/1e9, pytz.timezone('Asia/Shanghai'))
Out[289]: datetime.datetime(2020, 10, 6, 8, 0, tzinfo=<DstTzInfo 'Asia/Shanghai' CST+8:00:00 STD>)
为了避免出现时差，可以指定时区：
datetime.fromtimestamp(np.datetime64('2020-10-06T00:00:00.000000000').astype(datetime)/1e9, pytz.timezone('UTC'))
Out[290]: datetime.datetime(2020, 10, 6, 0, 0, tzinfo=<UTC>)

# np.datetime64 -> string
datetime.strftime(datetime.fromtimestamp(np.datetime64('2020-10-06T00:00:00.000000000').astype(datetime)/1e9, pytz.timezone('UTC')),'%Y-%m-%d %H:%M:%S')
Out[291]: '2020-10-06 00:00:00'
datetime.strftime(datetime.fromtimestamp(np.datetime64('2020-10-06T00:00:00.000000000').astype(datetime)/1e9),'%Y-%m-%d %H:%M:%S')
Out[292]: '2020-10-06 08:00:00'


