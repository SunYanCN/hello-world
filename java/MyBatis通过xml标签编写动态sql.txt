
MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。

l 提供映射标签，支持对象与数据库的orm字段关系映射
l 提供对象关系映射标签，支持对象关系组建维护
l 提供xml标签，支持编写动态sql。


# foreach标签 - collection属性的使用介绍
Foreach 也就是遍历迭代，主要用在构建 in 条件中，它可以在 SQL 语句中迭代一个集合；
foreach 元素的主要属性有： item,  index,  collection,  open,  separator,  close
item ---> 集合中每一个元素进行迭代的别名
index ---> 表示迭代过程中，每次迭代的位置
open ---> 该语句以什么开始
separator ---> 在每次进行迭代之间以什么符号作为分隔符
close ---> 该语句以什么结束

  <select id="ForeachTest" resultType="Blog">
          select * from t_blog where id in
       <foreach collection="list" index="index" item="item" open="(" separator="," close=")">
               #{item}       
       </foreach>    
   </select>


在使用 foreach 的时候最关键的也是容易出错的就是 collection 属性，该属性是必须指定的，不同情况，属性值不同；


有一下3种情况：
① 如果传入的是单参数且参数类型是一个 List 的时候，collection 属性值为 List；	
② 如果传入的是单参数且参数类型是一个 Array 数组的时候，collection 的属性值为 Array；
③ 如果传入的参数是多个的时候，我们就需要把它们封装成一个 Map 。
示例2：
    <update id = "updateColRelation">
        <if test="hiveSubResultList!=null and hiveSubResultList.size>0">
            <foreach collection="hiveSubResultList" item="hiveSubResult" index="index">
                update pg_db.pg_table
                set
                    distribution = #{hiveSubResult.distribution},
                    sample = #{hiveSubResult.sample},
                    updated_date=CURRENT_TIMESTAMP
                where
                    db = #{hiveSubResult.hiveDb}
                    and table_col = #{hiveSubResult.hiveTable}
                    and column_col = #{hiveSubResult.hiveCol};
            </foreach>
        </if>
    </update>

# 插入当前时间， current_timestamp：
    <update id = "batchUpdatePriceRangeInfo">
        <if test="priceRangeArrayList!=null and priceRangeArrayList.size>0">
            INSERT INTO
            pg_db.pg_table (
                mode_name,
                mode_desc,
                min_price,
                max_price,
                price_unit,
                last_update_date,
                last_update_by
            )
            VALUES
            <foreach collection="priceRangeArrayList" index="index" item="priceRange" open="(" separator="), (" close=")">
                #{priceRange.modeName},
                #{priceRange.modeDesc},
                #{priceRange.minPrice},
                #{priceRange.maxPrice},
                #{priceRange.priceUnit},
                current_timestamp,
                #{priceRange.lastUpdateBy}
            </foreach>

            ON CONFLICT (mode_name) DO UPDATE
            SET
                mode_desc = excluded.mode_desc,
                min_price = excluded.min_price,
                max_price = excluded.max_price,
                price_unit = excluded.price_unit,
                last_update_date = excluded.last_update_date,
                last_update_by = excluded.last_update_by;
        </if>
    </update>

# 查询时，将时间戳转换为字符串输出
    <select id="selectPriceRangeInfo" resultType="com.alibaba.fastjson.JSONObject">
        select to_char(create_date,'yyyy-MM-dd hh24:mi:ss') create_date,
                to_char(last_update_date,'yyyy-MM-dd hh24:mi:ss') last_update_date,
                *
        from pg_db.pg_table
    </select>



if
mapper中编写sql，使用<if test = ' '> </if>,可以使你的接口很便捷

举个栗子:

select * from student
<if test = " id != null ">
     where student.id =#{id}
</if>

一个<if>标签还是不够用的，你单独使用<if>的时候肯定还会遇到这样的问题

select * from student
where
<if test = " id != null ">
student.id = #{id}
</if>
<if test = " name != null and name != '' ">
and student.name = #{name}
</if>

如果当你的id为空时，name前面的and是没有必要的，运行会抛异常
或者当这两个<if>都为空时，只剩一个空的where，还是会报错; 故可以在前面添加一个恒真条件，如1；

where
select * from student
<where>
1
<if test = " id != null ">
    and student.id = #{id}
</if>
<if test = " name != null and name != '' ">
    and student.name = #{name}
</if>
</where>

where 元素只会在至少有一个子元素的条件返回 SQL 子句的情况下才去插入WHERE子句。而且，若语句的开头为AND或OR，where 元素也会将它们去除。
if-else =>> choose, when, otherwise
首先，在myBatis中是不支持if-else的，想要是用if-else的话，可以使用choose代替。
choose，when,otherwise有点像Java中的switch

栗子：


<select id="findActiveBlogLike"
     resultType="Blog">
  SELECT * FROM BLOG WHERE state = ‘ACTIVE’
  <choose>
    <when test="title != null">
      AND title like #{title}
    </when>
    <when test="author != null and author.name != null">
      AND author_name like #{author.name}
    </when>
    <otherwise>
      AND featured = 1
    </otherwise>
  </choose></select>

# mybatis 控制台打印执行的SQL语句
1. Spring boot 集成 mybatis 
1 logging.level.com.example.demo.dao=debug
　　com.example.demo.dao指的是mybatis对应的方法接口文件所在的包路径。

1.2 如果使用的是application.yml文件，加入如下配置：
logging:
  level:
     com.example.demo.dao : debug
com.example.demo.dao 指的是mybatis对应的方法接口所在的包路径。

# MyBatis中如何一次执行多条语句
1、修改数据库连接参数加上allowMultiQueries=true，如：

hikariConfig.security.jdbcUrl=jdbc:mysql://xx.xx.xx:3306/xxxxx?characterEncoding=utf-8&autoReconnect=true&failOverReadOnly=false&allowMultiQueries=true
2、直接写多条语句，用“；”隔开即可

<delete id="deleteUserById" parameterType="String">
    delete from sec_user_role where userId=#{id};
    delete from sec_user where id=#{id};
</delete>

# 一次执行多条语句，事务：
mybatis 事务注解 必须加在 service层Impl方法上才有效。
    @Override
    @Transactional 
    public int updateByPrimaryKeySelective(AdslotDO record) {
        ruleService.updateAdSlotIdsBySlot(record);//service层业务逻辑。
        return ccAdslotMapper.updateByPrimaryKeySelective(record);
    }

# Mybatis属性useGeneratedKeys,keyProperty,keyColumn的使用
useGeneratedKeys: 默认为false，为true时，表示如果插入的表以自增列为主键，则允许 JDBC 支持自动生成主键，并可将自动生成的主键返回；
keyProperty: 实体类对应主键的属性；
keyColumn: 数据库中的主键；

