
du -sm * | sort -n //统计当前目录大小 并按大小 排序

按文件大小排序，也可以用：
-S sort by file size
文件由大到小排序
ls -Sl
文件由小到大排序
ls -Slr

# 查看docker容器资源使用情况，并按cpu从大到小输出：
# 按CPU的使用情况进行排序输出：
ubuntu@ip-172-33-13-170:~$ docker stats --all --format "table {{.CPUPerc}}\t{{.MemUsage}}\t{{.Container}}" --no-stream |sort -r

shell sort命令
用法：sort [选项]... [文件]...
串联排序所有指定文件并将结果写到标准输出。

排序选项：

-b, --ignore-leading-blanks 忽略前导的空白区域
-d, --dictionary-order  只考虑空白区域和字母字符
-f, --ignore-case   忽略字母大小写
-g, --general-numeric-sort  按照常规数值排序
-i, --ignore-nonprinting    只排序可打印字符
-n, --numeric-sort  根据字符串数值比较
-r, --reverse   逆序输出排序结果

其他选项：

-c, --check, --check=diagnose-first 检查输入是否已排序，若已有序则不进行操作
-k, --key=位置1[,位置2] 在位置1 开始一个key，在位置2 终止(默认为行尾)
-m, --merge 合并已排序的文件，不再进行排序
-o, --output=文件   将结果写入到文件而非标准输出
-t, --field-separator=分隔符    使用指定的分隔符代替非空格到空格的转换
-u, --unique    配合-c，严格校验排序；不配合-c，则只输出一次排序结果

 

例子1：-u 去重 ，默认安装ASCII码升序排列

## 查看文件内容
cat test_sort.txt
 
## sort -u 去重
cat test_sort.txt |sort -u


 

例子2： -r ,降序排序
## 查看文件内容
cat test_sort.txt
 
## sort 默认升序
cat test_sort.txt |sort
 
## sort -r 降序
cat test_sort.txt |sort -r
　　

 

 例子3： -g 、-n ，按照数值排序
 
## sort 默认升序，但默认按照字符串比较，会出现2 大于10的情况
cat test_sort.txt |sort
 
## 按照常规数值排序
cat test_sort.txt |sort -g
 
## 按照字符串数值排序
cat test_sort.txt |sort -n
　　

 

例子4：-t （设置分隔符）和-k （指定某列）
## 查看文件内容
cat test_sort.txt
 
## sort -t -k
cat test_sort.txt |sort -n -t "|" -k 3

## 若分隔符为TAB键，则需按如下形式：
cat clid_group1.txt |sort -n -t $'\t' -k 2
如果不加$符号的话,会返回:sort: multi-character tab `\t'的错误。

## 使用指定列（-k6:第6列, -r:降序）降序排列
## 查询hive表的最新分区
hadoop fs  -ls hdfs://hdfs/user/hive/pa_safe.db/user_2106929 | sort -k6 -r | head -1 | tail -c 11

按时间排序：　　
# 按修改文件时间升序排列：
ls -rtl

# 按修改文件时间降序排列：
ls -tl

# 按文件大小排序：
使用 

 ll -S | grep '^[^d]'  

// 格式化文件大小形式
 ll -Sh | grep '^[^d]'  

# 统计一个文件里某行出现的次数并排序
less abcd.txt|sort | uniq -c | sort -n -r
uniq -c，统计各行出现的次数，并把次数打印在每行前端
sort -n -r 每行都以数字开头，按数字从达到小，排列各行

# 分组统计：
# test.txt
YD5Gxxx|6618151|6825449073|6476534190|36251|超级会员|0
YD5Gxxx|8968336|1445546463|6476534190|36251|超级会员|0
YD5Gxxx|2545939|6904742993|0858636804|36251|超级会员|80%以上
YD5Gxxx|3200810|6896525523|6501574903|36251|普通|0
分组统计
[$6] 实现分组，count[$6]++ 实现计数。
awk -F '|' '{count[$6]++;} END {for(i in count) {print i count[i]}}' test.txt
根据第7列进行筛选之后，再按第6列进行分组统计。
awk -F '|' '{if($7=="0") {count[$6]++;}} END {for(i in count) {print i count[i]}}' test.txt

分组求和
对所有进行求和。
awk -F '|' '{sum += $2} END {print sum}' test.txt
# 48629596
分组一般使用x[$2]=x[$3]的方式来实现，其中x[$2]中的$2为要分的组，可以多个分组，x[$3]为要处理的值。

一次分组
awk -F '|' '{x[$6] += $2} END {for(i in x){print i, x[i]}}' test.txt

二次分组
awk -F '|' '{x[$6"-"$7] += $2} END {for(i in x){print i, x[i]}}' test.txt

格式化处理
awk -F '|' '{x[$6] += $2} END {for(i in x){print("%s\t%d\n",i,x[i])}}' test.txt

分组求平均值
awk -F '|' '{sum += $2} END {print "Average = ", sum/NR}' test.txt
# Average =  4.86296e+06

awk -F '|' '{a[$6] += $2; ca[$6]++} END {for(i in a){print(i,a[i]/ca[i])}}' test.txt

分组求最大最小
awk -F '|' 'BEGIN {max=0} {if($2>max){max=$2}} END {print max}' test.txt
# 最大值

awk -F '|' '{if($2>x[$6]){x[$6]=$2}} END {for(i in x) {print i, x[i]}}' test.txt

分组整理字符
awk -F '|' '{x[$6]=x[$6]"\n"$2} END {for(i in x){print i ":" x[i]}}' test.txt


