
cut切割提取列
cut 文件或数据 -d 分隔符切割 -f 提取第X列

cut切割提取字符
cut 文件或数据 -c 提取字符范围

cut切割提取字节
cut 文件或数据 -nb 提取直接范围

cut命令将行按指定的分隔符分割成多列
-b：按字节筛选；这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。一般一个汉字算三个字节
-n：与"-b"选项连用，表示禁止将字节分割开来操作；
-c：按字符筛选；以字符为单位进行分割，一个汉字算一个字符
-f：按字段筛选；列号，获取第几列
-d：指定字段分隔符，不写-d时的默认字段分隔符为"TAB"；因此只能和"-f"选项一起使用。
-s：避免打印不包含分隔符的行；比如，我用空格进行分割，但有的行压根就没有空格，这个时候就不要在结果中展示，可以使用-s参数；
--complement：补足被选择的字节、字符或字段（反向选择的意思或者说是补集）；
--output-delimiter：指定输出分割符；默认为输入分隔符

提取范围说明
提取范围	说明
n-	提取指定第n列或字符或字节后面所有数据
n-m	提取指定第n列或字符或字节到第m列或字符或字节中间的所有数据
-m	提取指定第m列或字符或字节前面所有数据
n1,n2,...	提前指定枚举列的所有数据

# 展示第一行，前500个字符：
# head -n 1 test3.log |cut -c -500

# 按空格作为分隔符，提取文件中第一列数据
cut cut1.txt -d " " -f 1

# 按空格作为分隔符，提取文件中第一列,第三列, 枚举查找
cut cut1.txt -d " " -f 1,3

# 提取文件中第二列,第三列,第四列,第五列, 范围查找
cut cut1.txt -d " " -f 2-5

# 提取文件中第二列及后面所有列的数据
cut cut1.txt -d " "  -f 2- 

# 提取文件第三列及第三列之前所有列数据：
cut -d " " -f -3 cut1.txt

# 提取每一行的2至4(闭区间，包含第2个和第四个)个字符
cut cut1.txt -c 2-4

# 提取每一行第四个及之后的字符：
cut cut1.txt -c 4-

# 按字节提取，提取每一行前3个字节：注意： 一个汉字三个字节，若提取没有跟汉字完全匹配，比如提取4个字节时，第一个汉字正常，但后面还有一个字节的汉字，但又不完整，可能会表示为：�
cut cut1.txt -b -3

# 当碰到不规则文件怎么办？每列不是都以单个空格分隔的，有的地方重复了几个空格，有的地方只有一个空格，也就是说，文本内容不是很规则。
可以使用tr工具来压缩连续字符。
# 以一个或多个空格进行分割，提取第2列：
cat abc.sh | tr -s " " | cut -d " " -f 2

# 避免没有分隔符的行也输出了；这时可以添加-s参数：
cat abc.sh | tr -s " " | cut -d" " -f 2 -s

# 反向选择，输出除了第2列、第4列之外的其他列
cat abc.sh | tr -s " " | cut -d" " -f2,4 -s --complement

# 使用"--output-delimiter"指定输出分隔符。
使用-b或者-c分隔了多段字符时，可以使用--output-delimiter，否则这些多段将拼接在一起。
# 将第3-5个字节作为第一列，第6-8个字符作为第二列，并且第一列，第二列用逗号分割开来
cut -b3-5,6-8 abc.sh --output-delimiter ","
# 按空格分割文件，提取第2、3列，并用逗号分割提取的列
cat abc.sh | tr -s " " |cut -d " " -f 2,3  --output-delimiter ","

# 范围交叉时，不会重复输出。比如-f3-5,4-6，则输出-f3-6。

# 如果范围顺序无序，则Linux会先对范围排序（升序）再输出。例如-f4-6,2等价于-f2,4-6。


