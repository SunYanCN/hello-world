
1、上传文件：
curl -XPOST http://192.168.3.145:8000/fileupload -H "Content-Type:multipart/form-data" -F "pid=yhb" -F "sign=qfwi22r1afwef" -F "xianzhong=重疾险" -F "knowledge=条款" -F "filename=@/home/gswyhq/Downloads/实施方案.pdf;type=application/pdf"
curl -XPOST localhost:8888/invoice/file -H "Content-Type:multipart/form-data" -F "_appid=mall" -F "_token=91ce2a68-3774-41a1-9253-535e3c1042a7" -F "file=@500_236.jpg"

注意："-F"与"-d"有一点不同，"-d"可以使用“-d 'a=1&b=2'”将两个字段放一起；而"-F"不行，一个"-F"只能包含一个key/value对，如："-F a=1 -F b=2"。

2、下载文件：
curl -o 本地文件名.jar http://192.168.3.101/weiangluo/pdf2text/raw/df609c76f5cb0a3605b597e2a3fed7f60355e809/pdf2text/pdf2text-0.1.jar

3、curl中超时时间timeout设置：
使用curl时，有两个超时时间：一个是连接超时时间，另一个是整个过程允许的最大时间，
  --connect-timeout <seconds>
  这个是指定连接超时时间。 如果出错， 提示形如：curl: (28) connect() timed out!

  -m/--max-time <seconds>
  这个是指定整个过程最大的允许时间。 出错提示如：curl: (28) Operation timed out after 2000 milliseconds with 0 bytes received
示例：
time curl http://192.168.3.105:18900/parser -d @ner_args_data.json --max-time 6000

4、命令行利用curl 获取HTTP返回的状态码:
curl https://www.baidu.com -w %{http_code}

5、curl不带有任何参数时，curl 就是发出 GET 请求。
$ curl https://www.example.com
上面命令向www.example.com发出 GET 请求，服务器返回的内容会在命令行输出。

6、-A参数指定客户端的用户代理标头，即User-Agent。curl 的默认用户代理字符串是curl/[version]。
$ curl -A 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36' https://google.com
上面命令将User-Agent改成 Chrome 浏览器。

curl命令模拟浏览器下载和访问：
curl --user-agent  "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36"  你要访问的地址

$ curl -A '' https://google.com
上面命令会移除User-Agent标头。

也可以通过-H参数直接指定标头，更改User-Agent。
$ curl -H 'User-Agent: php/1.0' https://google.com

7、-b参数用来向服务器发送 Cookie。
$ curl -b 'foo=bar' https://google.com
上面命令会生成一个标头Cookie: foo=bar，向服务器发送一个名为foo、值为bar的 Cookie。

$ curl -b 'foo1=bar;foo2=bar2' https://google.com
上面命令发送两个 Cookie。

$ curl -b cookies.txt https://www.google.com
上面命令读取本地文件cookies.txt，里面是服务器设置的 Cookie（参见-c参数），将其发送到服务器。

8、-c参数将服务器设置的 Cookie 写入一个文件。
$ curl -c cookies.txt https://www.google.com
上面命令将服务器的 HTTP 回应所设置 Cookie 写入文本文件cookies.txt。

9、-d参数用于发送 POST 请求的数据体。
$ curl -d 'login=emma＆password=123' -X POST https://google.com/login
# 或者
$ curl -d 'login=emma' -d 'password=123' -X POST  https://google.com/login
使用-d参数以后，HTTP 请求会自动加上标头Content-Type : application/x-www-form-urlencoded。并且会自动将请求转为 POST 方法，因此可以省略-X POST。

-d参数可以读取本地文本文件的数据，向服务器发送。

$ curl -d '@data.txt' https://google.com/login
上面命令读取data.txt文件的内容，作为数据体向服务器发送。

curl -D cookie -d "username=abcdef&password=abc def" http://login.xxx.com/提示登入失败。
问题：post的数据里带空格。比如用户名为"abcdef"，密码为"abc def"，其中有一个空格
解决方法：
curl -D cookie -d "username=abcdef" -d "password=abc efg" http://login.xxx.com/这样就能成功登入了。

-D 参数是把http的response里面的cookie信息存到一个特别的文件中去，这样，当页面被存到page.html的同时，cookie信息也被存到了cookie0001.txt里面了
　　$ curl -x 123.45.67.89：1080 -o page.html -D cookie0001.txt http://www.linuxidc.com
　　下一次访问的时候，使用option来把上次的cookie信息追加到http request里面去：-b
　　$ curl -x 123.45.67.89：1080 -o page1.html -D cookie0002.txt -b cookie0001.txt http://www.linuxidc.com

10、--data-urlencode参数等同于-d，发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码。
$ curl --data-urlencode 'comment=hello world' https://google.com/login
上面代码中，发送的数据hello world之间有一个空格，需要进行 URL 编码。

11、-e参数用来设置 HTTP 的标头Referer，表示请求的来源。
curl -e 'https://google.com?q=example' https://www.example.com
上面命令将Referer标头设为https://google.com?q=example。

-H参数可以通过直接添加标头Referer，达到同样效果。

curl -H 'Referer: https://google.com?q=example' https://www.example.com

12、-F参数用来向服务器上传二进制文件。
$ curl -F 'file=@photo.png' https://google.com/profile
上面命令会给 HTTP 请求加上标头Content-Type: multipart/form-data，然后将文件photo.png作为file字段上传。

-F参数可以指定 MIME 类型。

$ curl -F 'file=@photo.png;type=image/png' https://google.com/profile
上面命令指定 MIME 类型为image/png，否则 curl 会把 MIME 类型设为application/octet-stream。

-F参数也可以指定文件名。

$ curl -F 'file=@photo.png;filename=me.png' https://google.com/profile
上面命令中，原始文件名为photo.png，但是服务器接收到的文件名为me.png。

13、-G参数用来构造 URL 的查询字符串。
$ curl -G -d 'q=kitties' -d 'count=20' https://google.com/search
上面命令会发出一个 GET 请求，实际请求的 URL 为https://google.com/search?q=kitties&count=20。如果省略--G，会发出一个 POST 请求。

如果数据需要 URL 编码，可以结合--data--urlencode参数。

$ curl -G --data-urlencode 'comment=hello world' https://www.example.com

14、-H参数添加 HTTP 请求的标头。
$ curl -H 'Accept-Language: en-US' https://google.com
上面命令添加 HTTP 标头Accept-Language: en-US。

$ curl -H 'Accept-Language: en-US' -H 'Secret-Message: xyzzy' https://google.com
上面命令添加两个 HTTP 标头。

$ curl -d '{"login": "emma", "pass": "123"}' -H 'Content-Type: application/json' https://google.com/login
上面命令添加 HTTP 请求的标头是Content-Type: application/json，然后用-d参数发送 JSON 数据。

开启gzip请求
curl -I http://www.sina.com.cn/ -H Accept-Encoding:gzip,defalte

15、-i参数打印出服务器回应的 HTTP 标头。
$ curl -i https://www.example.com
上面命令收到服务器回应后，先输出服务器回应的标头，然后空一行，再输出网页的源码。

16、-I参数向服务器发出 HEAD 请求，然会将服务器返回的 HTTP 标头打印出来。
$ curl -I https://www.example.com
上面命令输出服务器对 HEAD 请求的回应。

--head参数等同于-I。

$ curl --head https://www.example.com

17、-k参数指定跳过 SSL 检测。
$ curl -k https://www.example.com
上面命令不会检查服务器的 SSL 证书是否正确。

18、-L参数会让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。
$ curl -L -d 'tweet=hi' https://api.twitter.com/tweet
--limit-rate
--limit-rate用来限制 HTTP 请求和回应的带宽，模拟慢网速的环境。

$ curl --limit-rate 200k https://google.com
上面命令将带宽限制在每秒 200K 字节。

19、-o参数将服务器的回应保存成文件，等同于wget命令。
$ curl -o example.html https://www.example.com
上面命令将www.example.com保存成example.html。

20、-O参数将服务器回应保存成文件，并将 URL 的最后部分当作文件名。
$ curl -O https://www.example.com/foo/bar.html
上面命令将服务器回应保存成文件，文件名为bar.html。

如果screen1.JPG以外还有screen2.JPG、screen3.JPG、....、screen10.JPG需要下载，可以这样：
curl -O https://www.example.com/foo/screen[1-10].JPG

curl -O https://www.example.com/~{zzh,nick}/[001-201].JPG
这样产生的下载，就是
~zzh/001.JPG
~zzh/002.JPG
...
~zzh/201.JPG
~nick/001.JPG
~nick/002.JPG
...
~nick/201.JPG

但由于zzh/nick下的文件名都是001，002...，201，下载下来的文件重名，后面的把前面的文件都给覆盖掉了~~~

curl -o #2_#1.jpg https://www.example.com/~{zzh,nick}/[001-201].JPG
-- 自定义文件名的下载
#1是变量，指的是{zzh,nick}这部分，第一次取值zzh，第二次取值nick
#2代表的变量，则是第二段可变部分---[001-201]，取值从001逐一加到201
这样，自定义出来下载下来的文件名，就变成了这样：
原来： ~zzh/001.JPG ---> 下载后： 001-zzh.JPG
原来： ~nick/001.JPG ---> 下载后： 001-nick.JPG
这样一来，就不怕文件重名

断点续传：
curl -c -O https://www.example.com/~zzh/screen1.JPG

-r 分块下载：
比如我们有一个https://www.example.com/~zzh/zhao1.mp3 要下载
我们就可以用这样的命令：
curl -r 0-10240 -o "zhao.part1" https://www.example.com/~zzh/zhao1.mp3 &\
curl -r 10241-20480 -o "zhao.part2" https://www.example.com/~zzh/zhao1.mp3 &\
curl -r 20481-40960 -o "zhao.part3" https://www.example.com/~zzh/zhao1.mp3 &\
curl -r 40961- -o "zhao.part4" https://www.example.com/~zzh/zhao1.mp3
这样就可以分块下载啦。
不过需要自己把这些破碎的文件合并起来
如果你用UNIX或苹果，用 cat zhao.part* > zhao.mp3就可以
或者 cat zhao.part1 zhao.part2 zhao.part3 zhao.part4 > zhao.mp3

21、-s参数将不输出错误和进度信息。
$ curl -s https://www.example.com
上面命令一旦发生错误，不会显示错误信息。不发生错误的话，会正常显示运行结果。

如果想让 curl 不产生任何输出，可以使用下面的命令。

$ curl -s -o /dev/null https://google.com

22、-S参数指定只输出错误信息，通常与-s一起使用。
$ curl -S -o /dev/null https://google.com
上面命令没有任何输出，除非发生错误。

23、-u参数用来设置服务器认证的用户名和密码。
$ curl -u 'bob:12345' https://google.com/login
上面命令设置用户名为bob，密码为12345，然后将其转为 HTTP 标头Authorization: Basic Ym9iOjEyMzQ1。

curl 能够识别 URL 里面的用户名和密码。

$ curl https://bob:12345@google.com/login
上面命令能够识别 URL 里面的用户名和密码，将其转为上个例子里面的 HTTP 标头。

$ curl -u 'bob' https://google.com/login
上面命令只设置了用户名，执行后，curl 会提示用户输入密码。

24、-v参数输出通信的整个过程，用于调试。
$ curl -v https://www.example.com
--trace参数也可以用于调试，还会输出原始的二进制数据。

$ curl --trace - https://www.example.com

25、-x参数指定 HTTP 请求的代理。
$ curl -x socks5://james:cats@myproxy.com:8080 https://www.example.com
上面命令指定 HTTP 请求通过myproxy.com:8080的 socks5 代理发出。

如果没有指定代理协议，默认为 HTTP。

$ curl -x james:cats@myproxy.com:8080 https://www.example.com
上面命令中，请求的代理使用 HTTP 协议。

26、-X参数指定 HTTP 请求的方法。
$ curl -X POST https://www.example.com
上面命令对https://www.example.com发出 POST 请求。

来源：https://www.ruanyifeng.com/blog/2019/09/curl-reference.html

