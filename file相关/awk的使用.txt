
# 输出查询结果的第三列：
curl 192.168.3.105:9200/_cat/indices/*kg*_alias|awk '{print $3}'

# 1、打印文件的第一列(域)
awk '{print $1}' filename

2、打印文件的前两列(域)
awk '{print $1,$2}' filename

3、打印完第一列，然后打印第二列
awk '{print $1 $2}' filename

4、打印最后一列：
gswyhq@gswyhq-PC:~/yhb$ ls -al|awk '{print $NF}'

5、输出倒数第二列：
~$ head train.csv |awk '{print $(NF-1)}'

# 查找某个程序的进程，再批量kill掉：
gswyhq@gswyhq-PC:~/yhb$ ps -aux|grep draw|awk '{print $2}'|xargs kill

# awk求解字符串的长度：
head train3.txt |awk '{print length($0)}'
11
10

# awk给文本文件每行添加行号， 插入行号, 下面例子是插入行号及tab建
awk '$0=NR"\t"$0' semantic_test.txt > semantic_test2.txt
此处`NR`代表的就是插入的行号
同理，如需要在每行的末尾插入行号，并且用字符‘---’隔开：
awk '$0=$0"---"NR' semantic_test.txt
除了插入行号外，我们也可以在行首或行尾插入其他的固定字符：
awk '$0="句子开头\t"$0"\t句子结尾"' semantic_test.txt

# 取出前三列，并用tab键进行分割：
head test.txt |awk '{print $1"\t"$2"\t"$3}'

# 过滤指定列：
awk  -F ',' '$6=="山东"{print $6}' W20112701831574791524466.csv | wc -l
csv文件中第6列为山东的行数

awk指定分隔符：
$ head ratings.csv |awk -F "," '{print $3}'
或者：
$ head ratings.csv |awk 'BEGIN{FS=","}''{print $3}'
# 注意，两个单引号之间是没有空格的；或者改成：
$ head ratings.csv |awk 'BEGIN{FS=","}{print $3}'

# 输入分隔符也可以这样：
head 主题分类数据.txt |awk -v FS="t" '{print $2}'

# 输出分隔符：
可以使用awk的内置变量OFS来设定awk的输出分隔符，当然，使用变量的时候要配合使用-v选项，示例如下:
awk -v OFS="---" '{print $1,$2}' test1

若输出的时候，不需要分隔符，只需要把逗号去掉即可
awk '{print $1 $2}' 表示每行分割后，将第一列（第一个字段）和第二列（第二个字段）连接在一起输出。
awk '{print $1,$2}' 表示每行分割后，将第一列（第一个字段）和第二列（第二个字段）以输出分隔符隔开后显示。

# 将\t(文中一个'\'和一个't')，替换为：tab
head /notebooks/data/主题分类数据.txt |awk -v OFS="\t" 'BEGIN{FS="\\\\t"}{print $1,$2}'

# 字符串"\t"（是两个字符，而不是指tab）分割：
awk 'BEGIN{FS="\\\\t"}{print $1,$2}' test1
下面这样写却无效：
awk -v FS="\\\\t" '{print $1,$2}' test1

多分隔符：
head io.log | awk -F "aaa|bbb" '{print $2}'

awk 同时匹配多个条件：
同时匹配ABC 和 123:
awk '/ABC/&&/123/{ print $0 }'  

匹配ABC 或 123:
awk '/ABC/||/123/{ print $0 }'

# awk时间函数：
# systime函数返回当前时间戳
gswyhq@gswyhq-PC:~/data$ awk 'BEGIN{print systime()}'
1576475261
gswyhq@gswyhq-PC:~/data$ awk 'BEGIN{now=systime();print now}'
1576475186
# strftime函数，可以对时间戳进行格式化，格式化形式可以为%Y-%m-%d等（可见下表），如果函数有传参时间戳，则相应进行时间戳的格式转化，如果函数当中没有传参，则默认使用当前时间戳进行格式转化
strftime函数使用格式如下：
strftime([format],[ timestamp])
gswyhq@gswyhq-PC:~/data$ awk 'BEGIN{tmp=strftime("%Y-%m-%d %H:%M:%S",1576474706);print tmp}'
2019-12-16 13:38:26
# mktime函数创建指定时间，转化为时间戳
mktime函数用法如下：
mktime(YYYY" "MM" "DD" "HH" "MM" "SS)
注意必须使用空格分割
其中YYYY为年 MM为月 DD为日 HH为小时 MM是分 SS为秒，如2018" "09" "20" "20" "22" "30
gswyhq@gswyhq-PC:~/data$ awk 'BEGIN{print mktime(2018" "09" "20" "20" "22" "30)}'
1537446150

# 按字段的值进行筛选, 示例：筛选第二个字段的内容为Stock的行：
$ less table_schema.csv |awk -F "," '($2=="Stock"){print}'



