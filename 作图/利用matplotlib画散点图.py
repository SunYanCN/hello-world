#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
from matplotlib import pyplot as plt
mpl.rcParams["font.sans-serif"] = ["SimHei"]  # 展示中文字体
mpl.rcParams["axes.unicode_minus"] = False  # 处理负刻度值

# 数据来源
# "https://raw.githubusercontent.com/selva86/datasets/master/midwest_filter.csv"
midwest = [['AAR', 0.052, 66090], ['LHR', 0.0139999999999999, 10626], ['AAR', 0.022, 14991], ['ALU', 0.017, 30806], ['AAR', 0.018, 5836], ['AAR', 0.05, 35688], ['LAR', 0.017, 5322], ['AAR', 0.027, 16805], ['AAR', 0.024, 13437], ['AAR', 0.042, 34418], ['AAR', 0.03, 15921], ['LAR', 0.0279999999999999, 14460], ['LAU', 0.0289999999999999, 33944], ['AAR', 0.03, 51644], ['AAR', 0.026, 19464], ['AAR', 0.02, 10670], ['HAU', 0.038, 77932], ['AAR', 0.023, 16516], ['AAR', 0.025, 19464], ['AAR', 0.036, 19595], ['AAR', 0.0139999999999999, 7440], ['AAR', 0.0279999999999999, 31704], ['AAR', 0.044, 20893], ['AAR', 0.03, 14275], ['LHR', 0.025, 40319], ['AAR', 0.052, 38080], ['LHR', 0.019, 6909], ['AAR', 0.033, 15317], ['ALU', 0.026, 32337], ['LHR', 0.025, 8499], ['AAR', 0.047, 21373], ['LHR', 0.009, 5189], ['AAR', 0.023, 8096], ['AAU', 0.051, 51159], ['AAR', 0.067, 30787], ['AHR', 0.036, 61067], ['AAR', 0.0289999999999999, 10609], ['AAR', 0.033, 37020], ['AAU', 0.023, 20539], ['AAR', 0.035, 21821], ['LAR', 0.02, 11347], ['HLU', 0.018, 39413], ['AAR', 0.042, 56393], ['AHR', 0.022, 15972], ['AAR', 0.043, 34392], ['AAR', 0.062, 39301], ['AAR', 0.036, 30798], ['HHR', 0.034, 35244], ['AAR', 0.05, 47679], ['AAR', 0.035, 41561], ['AAR', 0.023, 12846], ['AAR', 0.033, 16269], ['LAR', 0.0139999999999999, 14752], ['AAU', 0.018, 11164], ['AAR', 0.033, 17290], ['ALU', 0.023, 22422], ['AAR', 0.0409999999999999, 30728], ['AAR', 0.033, 36397], ['AAR', 0.021, 13930], ['ALU', 0.045, 45957], ['LAR', 0.026, 21412], ['HLR', 0.025, 15548], ['AHR', 0.049, 17577], ['LHR', 0.022, 4373], ['LHR', 0.011, 7523], ['AAR', 0.01, 5730], ['LAR', 0.036, 34583], ['AAR', 0.022, 16545], ['LHR', 0.022, 26551], ['AAR', 0.026, 7498], ['AAR', 0.015, 5644], ['AAR', 0.044, 22261], ['AAR', 0.017, 6534], ['AAR', 0.033, 48052], ['LHR', 0.024, 17619], ['AAR', 0.012, 13111], ['AAR', 0.033, 19181], ['LAR', 0.033, 14965], ['LAR', 0.042, 17241], ['LHR', 0.0289999999999999, 16522], ['AAR', 0.0409999999999999, 60186], ['AAR', 0.025, 57733], ['HLU', 0.032, 32653], ['AAU', 0.021, 31095], ['AAR', 0.022, 63657], ['AAR', 0.024, 9441], ['AAR', 0.01, 14067], ['HLU', 0.024, 38147], ['ALR', 0.019, 14080], ['AAR', 0.022, 18809], ['AAR', 0.024, 38413], ['AAU', 0.021, 24705], ['AAU', 0.023, 30974], ['LHR', 0.018, 9914], ['LAR', 0.026, 27533], ['AAU', 0.019, 38835], ['AAR', 0.022, 23645], ['ALU', 0.022, 35324], ['ALR', 0.026, 36616], ['LAR', 0.012, 26015], ['AAU', 0.009, 64404], ['AAR', 0.025, 17808], ['LAR', 0.023, 19580], ['AAR', 0.021, 18840], ['AAR', 0.0289999999999999, 31913], ['AAR', 0.024, 74169], ['AAR', 0.033, 30410], ['HLU', 0.017, 45527], ['AAU', 0.0279999999999999, 29890], ['HLU', 0.024, 75717], ['AAR', 0.024, 48139], ['ALU', 0.023, 35427], ['AAR', 0.03, 37730], ['AAR', 0.034, 24960], ['AAR', 0.022, 21512], ['AAR', 0.021, 29797], ['LAR', 0.021, 23661], ['AAR', 0.031, 39884], ['ALR', 0.032, 65294], ['LAR', 0.022, 29477], ['AAR', 0.027, 42836], ['AAR', 0.026, 42182], ['LAR', 0.021, 10369], ['AAR', 0.024, 36897], ['HAR', 0.03, 34436], ['ALU', 0.024, 55920], ['AAR', 0.024, 13551], ['AAR', 0.025, 37877], ['LAU', 0.005, 5315], ['LAR', 0.023, 18409], ['LAR', 0.023, 17281], ['AAR', 0.027, 15410], ['LAR', 0.022, 19107], ['LAR', 0.02, 12509], ['AAU', 0.025, 25968], ['AAR', 0.026, 12643], ['AAR', 0.0289999999999999, 30315], ['AAR', 0.026, 27148], ['AAR', 0.025, 24616], ['AAR', 0.023, 18129], ['LHU', 0.011, 20991], ['ALU', 0.024, 40307], ['AAR', 0.024, 19490], ['LAR', 0.019, 22747], ['ALR', 0.021, 27446], ['AAR', 0.027, 18993], ['LAR', 0.013, 7738], ['ALU', 0.016, 16119], ['AAR', 0.01, 6976], ['AAU', 0.016, 16773], ['AAR', 0.023, 35069], ['AAR', 0.021, 8176], ['HLU', 0.023, 44920], ['LAR', 0.03, 23717], ['AAR', 0.024, 71951], ['ALU', 0.021, 25948], ['AAR', 0.03, 23265], ['ALU', 0.02, 27651], ['AAR', 0.0409999999999999, 10145], ['AAR', 0.051, 8972], ['AAR', 0.034, 30605], ['AAR', 0.031, 18185], ['LHR', 0.021, 14931], ['AAR', 0.054, 7954], ['AAR', 0.034, 50057], ['AAR', 0.02, 12200], ['AAR', 0.0289999999999999, 41502], ['AAR', 0.03, 49477], ['AAR', 0.022, 21468], ['AAR', 0.048, 21398], ['AAR', 0.078, 34604], ['LHR', 0.034, 24952], ['HLU', 0.034, 57883], ['AAR', 0.034, 12260], ['AAR', 0.069, 37780], ['AAR', 0.046, 26831], ['HAR', 0.027, 25040], ['LHR', 0.031, 21896], ['AAR', 0.068, 18052], ['HAR', 0.03, 64273], ['AAR', 0.033, 38982], ['AAR', 0.034, 43431], ['AHR', 0.06, 35446], ['LAR', 0.05, 34951], ['AAR', 0.034, 57024], ['AAR', 0.033, 30209], ['AAR', 0.07, 13175], ['AHR', 0.034, 54624], ['AAR', 0.033, 13497], ['LHR', 0.02, 1701], ['LHR', 0.035, 8583], ['AAU', 0.038, 74768], ['HAR', 0.021, 16527], ['AHR', 0.055, 5763], ['AAR', 0.059, 10674], ['AAR', 0.032, 21265], ['HAR', 0.11, 70887], ['AAR', 0.0289999999999999, 25537], ['AHR', 0.034, 37308], ['AAR', 0.064, 24920], ['HAU', 0.031, 75651], ['AAR', 0.033, 12147], ['AAR', 0.042, 53059], ['LAR', 0.033, 8936], ['AAR', 0.051, 38202], ['AHR', 0.03, 22454], ['LHR', 0.032, 18681], ['AAR', 0.078, 8854], ['AHR', 0.034, 20146], ['LHR', 0.033, 7842], ['AAR', 0.031, 17957], ['LAR', 0.042, 13743], ['AHR', 0.034, 19776], ['AAR', 0.0289999999999999, 58913], ['AAR', 0.0559999999999999, 39928], ['AAR', 0.075, 8302], ['AAR', 0.031, 69770], ['AAR', 0.048, 55498], ['AAU', 0.037, 70060], ['AAR', 0.034, 26360], ['LHR', 0.035, 25371], ['AAR', 0.025, 47507], ['AHR', 0.03, 59549], ['ALU', 0.024, 44585], ['AAU', 0.031, 71074], ['LAU', 0.0279999999999999, 34966], ['AAU', 0.024, 26521], ['AAR', 0.026, 36019], ['AAR', 0.024, 35415], ['AAR', 0.034, 35427], ['AAU', 0.023, 47870], ['AAR', 0.036, 53619], ['AAR', 0.023, 39350], ['HLU', 0.027, 66929], ['AAR', 0.0139999999999999, 76779], ['LAR', 0.024, 27466], ['ALU', 0.025, 38498], ['LHR', 0.026, 30954], ['AAR', 0.032, 39024], ['HLR', 0.031, 65536], ['AAR', 0.0279999999999999, 31111], ['AHR', 0.025, 16085], ['ALR', 0.025, 29108], ['LAR', 0.034, 35728], ['LAR', 0.024, 25533], ['LAR', 0.025, 32849], ['AAR', 0.03, 56240], ['LHR', 0.024, 30230], ['AAR', 0.03, 47473], ['LHU', 0.026, 61834], ['AAR', 0.027, 42310], ['AAU', 0.0279999999999999, 37068], ['AAR', 0.024, 64274], ['LHR', 0.025, 22987], ['ALR', 0.0279999999999999, 39443], ['AHR', 0.026, 15497], ['AHR', 0.025, 14194], ['AAR', 0.024, 27749], ['AAR', 0.024, 11336], ['ALR', 0.016, 40029], ['AAR', 0.025, 20488], ['AHR', 0.023, 31557], ['AAU', 0.03, 48255], ['LHR', 0.026, 24249], ['AAR', 0.025, 40113], ['ALR', 0.0289999999999999, 33819], ['LHR', 0.0409999999999999, 69330], ['AAR', 0.024, 61963], ['AAR', 0.033, 59733], ['AAR', 0.025, 44915], ['AAR', 0.026, 31969], ['ALR', 0.024, 30464], ['LHR', 0.024, 11098], ['AAU', 0.038, 62254], ['AAR', 0.025, 36956], ['AAR', 0.024, 22254], ['LAR', 0.0409999999999999, 15682], ['AAR', 0.054, 16307], ['AAR', 0.053, 40750], ['AAR', 0.089, 14008], ['AAR', 0.04, 13584], ['AAR', 0.053, 13084], ['ALU', 0.023, 34291], ['AAU', 0.063, 52360], ['LAR', 0.072, 31647], ['AAR', 0.046, 45088], ['AAR', 0.035, 15940], ['ALR', 0.054, 76559], ['AAR', 0.0279999999999999, 25690], ['AAU', 0.078, 41758], ['AAR', 0.052, 35909], ['AAR', 0.03, 4590], ['LHR', 0.06, 8776], ['AAR', 0.069, 49264], ['AAR', 0.034, 30339], ['AAR', 0.022, 18651], ['HAR', 0.046, 20150], ['AAR', 0.047, 6153], ['AAR', 0.06, 16588], ['ALR', 0.035, 67783], ['AAR', 0.047, 21650], ['AAR', 0.02, 18878], ['AAR', 0.037, 16076], ['AAR', 0.052, 19505], ['AAR', 0.053, 26993], ['AAR', 0.0819999999999999, 40548], ['AAR', 0.027, 12321], ['LHR', 0.021, 3890], ['AAR', 0.054, 36633], ['AAR', 0.06, 30226], ['AAR', 0.071, 31679], ['HLU', 0.015, 72831], ['AAR', 0.0139999999999999, 7107], ['HAU', 0.034, 32765], ['AAR', 0.055, 34773], ['AAR', 0.048, 61405], ['AAR', 0.075, 15600], ['AAR', 0.034, 17521], ['AAR', 0.055, 15079], ['HLU', 0.044, 50251], ['AAR', 0.05, 46975], ['AHR', 0.079, 14181], ['AAR', 0.054, 37157], ['AAR', 0.057, 18901], ['AAR', 0.043, 25263], ['AAR', 0.048, 25617], ['AAR', 0.06, 17707], ['AAR', 0.032, 75000], ['AAR', 0.05, 13772], ['AAR', 0.045, 46104], ['AAR', 0.037, 19385], ['AAR', 0.048, 73605]]

# 过滤标签，去除标签重复像
categories = list(set(category for category, area, poptotal in midwest))  # 去掉所有重复的项

plt.figure(figsize=(16, 10))
for i in range(len(categories)):
    plt.scatter([area for category, area, poptotal in midwest if category == categories[i]],
                [poptotal for category, area, poptotal in midwest if category == categories[i]],
                s=20,
                c=np.array(plt.cm.tab10(i / len(categories))).reshape(1, -1),
                label=categories[i]
                )
plt.legend()
plt.show()

####################################################################################################################
# 画散点图并给每个点标注上文本：
x = [2,4,6,7,8,5,4,3]
y = [3,6,5,8,4,3,2,4]
txt = ['我','今','晚','上','吃','了','个','鲸']

import matplotlib.pyplot as plt
plt.rcParams['font.sans-serif']=['SimHei'] #用来正常显示中文标签
plt.scatter(x, y)
plt.plot(x, y) # 将散点图的点连线连起来
for i in range(len(x)):
    plt.annotate(txt[i], xy = (x[i], y[i]), xytext = (x[i]+0.1, y[i]+0.1)) # 这里xy是需要标记的坐标，xytext是对应的标签坐标
plt.show()

# 这里散点标记文本，使用annotate函数
#plt.annotate(" 标记的文本 ", xy, xytext)
#第一个参数是预标记的文本
#第二个参数是预标注的点坐标
#第三个参数是预标记文本的坐标

####################################################################################################################
# 标记点挨着太近，可以使用from adjustText import adjust_text，渲染；

def main():
    pass


if __name__ == '__main__':
    main()
