删除表数据但保留表结构使用truncate更快速安全，使用方法为：
//当表没有其他关系时
TRUNCATE TABLE tablename;
//当表中有外键时，要用级联方式删所有关联的数据
TRUNCATE TABLE tablename CASCADE;


SELECT * FROM "c_relation" where db = 'de_safe' and table_collision = 'data_collision_info';
where 后面限定条件查询值需是单引号，若是双引号会报错：
[column does not exist]

查询空值，若是下面这样查询空值可能查询不到：
select * from pg_db.pg_table where guid in ('', null, '""') ;
需要改成：
select * from pg_db.pg_table  where guid in ('', null, '""') or guid is null;

# 插入数据
INSERT INTO pg_db.pg_table (uuid,name,update_time,tag) VALUES 
('ab060a4a-fdec-44d4-be6e-30de4292920a','abc','2021-04-23 10:35:10.070',NULL);

# 一次插入多条数据：
INSERT INTO pg_db.pg_table (uuid,name,update_time,tag) VALUES
('ab060a4a-fdec-44d4-be6e-30de4292920a','abc','2021-04-23 10:35:10.070',NULL),
('abcdefaa-fdec-44d4-be6e-30de4292222a','123','2021-04-23 10:35:10.070',NULL);

# 删除数据
Delete from pg_db.pg_table  where id=3;

# 删除约束：
ALTER TABLE public.data_proposals_price_param DROP CONSTRAINT data_test333;
这里 data_test333 是约束名称；

# 更新数据
UPDATE pg_db.pg_table set guid = '24' where id=3 ;

# 方法一、新增数据，若不存在则新增，否则更新：
INSERT INTO pg_db.pg_table (mode_name,min_price, max_price) 
VALUES ('元/次', 0, 5), ('元/月', 0, 500)
ON CONFLICT (mode_name) DO UPDATE 
  SET min_price = excluded.min_price, 
      max_price = excluded.max_price;
注：这里mode_name,是唯一约束字段；excluded可理解是语法词，是固定的；min_price,max_price是存在时，需要更新的字段；


# 方法二、新增数据，若存在则更新，否则新增：
INSERT INTO public.table_name as tb (quantified_measure, weight) 
VALUES ( '字段数', '0.013' ) 
ON CONFLICT ON CONSTRAINT table_name_quantified_measure DO
UPDATE 
	SET weight = '0.015'
WHERE
	tb.quantified_measure = '字段数';
注意：这里唯一性约束是字段quantified_measure，故而先需对quantified_measure字段进行唯一性约束；这里 table_name_quantified_measure，是对应的唯一性约束名称；

# 添加字段唯一性约束的方法：
ALTER TABLE public.table_name DROP CONSTRAINT IF EXISTS table_name_quantified_measure;
alter table public.table_name add constraint table_name_quantified_measure unique (quantified_measure);

# 当然，也可以在建表的时候就添加唯一性约束，如：
CREATE TABLE public.table_name (
	id bigserial NOT NULL, -- 唯一ID
	quantified_measure varchar(200) NULL, -- 量化指标
	weight varchar(200) NULL, -- 权重项
	create_date timestamp NULL DEFAULT CURRENT_TIMESTAMP, -- 创建时间
	create_by varchar(200) NULL, -- 创建人
	last_update_date timestamp NULL DEFAULT CURRENT_TIMESTAMP, -- 更新时间
	last_update_by varchar(200) NULL, -- 最后更新人
	CONSTRAINT table_name_pkey PRIMARY KEY (id),
	CONSTRAINT table_name_quantified_measure UNIQUE (quantified_measure)
);

# 方法三、若没有添加唯一约束，又想达到“若不存在则新增，否则更新”的目的，可通过下面两条语句来完成：
UPDATE table SET field='C', field2='Z' WHERE id=3;
INSERT INTO table (id, field, field2)
       SELECT 3, 'C', 'Z'
       WHERE NOT EXISTS (SELECT 1 FROM table WHERE id=3);


# 添加索引：
CREATE INDEX idx_table_name_quantified_measure ON public.table_name USING btree (quantified_measure);

# 删除某个字段为空的数据：
delete from da_name.table_name where label_1 = null;
上面语句可能无效，需要改为：
delete from da_name.table_name where label_1 is null;

# 统计某个字段，各个值出现的次数：
SELECT service_category, COUNT(*) as num FROM pd_db.pg_table group by service_category;

# 统计某个字段中，某个值出现的比例：
WITH all_service_category AS
(
    SELECT service_category, COUNT(*) as num
    FROM pg_db.pg_table
    group by service_category
)
SELECT 
sum(case when t1.service_category='城市房价' then t1.num else 0 end ) / sum(t1.num) as hb2
from all_service_category t1;

# 使用通配符*,将多列原始合并为一列：
select ARRAY[t.*] as new_column FROM pg_db.pg_table as t limit 1

select array[t.*] as new_column FROM pg_db.pg_table as t limit 1;
select array_agg(t.*) as new_column FROM pg_db.pg_table as t limit 1;

with new_columns as 
(
	select unnest(array_agg(t.*)) as new_column FROM pg_db.pg_table as t limit 1
),
all_columns as (
select (new_column).* as all_col from new_columns
)
select t2 from all_columns as t2;

with new_columns as 
(
	select unnest(array_agg(t.*)) as new_column FROM pg_db.pg_table as t limit 1
),
all_columns as (
select (new_column).* as all_col from new_columns
)
select t2.* from all_columns as t2;

# 查询一行数据，并返回对应的json结果：
with new_columns as 
(
	select unnest(array_agg(t.*)) as new_column FROM pg_db.pg_table as t limit 1
),
all_columns as (
        select (new_column).* as all_col from new_columns
)
select row_to_json(t2) from all_columns as t2;

# 查询表，获取所有字段名：
with new_columns as
	(
	select unnest(array_agg(t.*)) as new_column FROM pg_db.pg_table as t limit 1
	),
all_columns as (
	select (new_column).* as all_col from new_columns
	),
row_json as (
	select row_to_json(t2) from all_columns as t2
	)
select json_object_keys(row_to_json) from row_json as t3;

# 等同于下面：
with new_columns as
	(
	select unnest(array_agg(t.*)) as new_column FROM pg_db.pg_table as t limit 2
	)
select json_object_keys(to_json(t2.new_column)) from new_columns as t2;	

# 查询记录，按字典格式返回数据：
select to_json(t.*) FROM pg_db.pg_table as t limit 2;

# 查询记录，按字典格式返回数据,并仅输出指定字段，这里是id字段；
select to_json(t.*)->>'id' as json_data FROM pg_db.pg_table as t limit 2;

# 批量插入更新，若存在则更新，若不存在则插入：
INSERT INTO users (id, level)
VALUES (1, 3), (2, 1)
ON CONFLICT (id) DO UPDATE
SET level = excluded.level;

已存在行(id=1) 的 level 更新为新的值 3, 并且插入未存在的新行。
这里注意到我们用到一个关键字 excluded 用于引用 INSERT 语句中 VALUES 提供的值，相应的表名 users 用于引用表中原有的值。

# 复制最后一次更新的记录，在此基础上修改并插入新记录；
with last_update_record as (
	select *
	from public.data_price_quantified_measure 
	where uuid = 'edff9a83-4bc9-42da-8ae2-9537c18b8fa1' 
	ORDER BY last_update_date 
	desc limit 1
	)
INSERT INTO public.data_price_quantified_measure  
(uuid, flag, create_date, update_frequency, data_source, safety_class, last_update_date)
SELECT uuid, true, create_date, update_frequency, data_source, '高敏感', current_timestamp
FROM last_update_record;

# 保留2位有效数字，保留指定位有效数字：
select round(cast( 2/3.0 as numeric), 6);

# 查询每个用户最后一次更新的数据：
# DISTINCT ON ( expression [, …] )把记录根据[, …]的值进行分组，分组之后仅返回每一组的第一行。需要注意的是，如果你不指定ORDER BY子句，返回的第一条的不确定的。如果你使用了ORDER BY 子句，那么[, …]里面的值必须靠近ORDER BY子句的最左边。 
select distinct on(uuid) uuid, price 
from public.collision_product_price_day 
where status = true
order by uuid, last_update_date desc;

# 分组，取每组第一个值;如：获取每门课程的最高分
postgres=# select distinct on(course)id,name,course,score from student order by course,score desc;
 id |  name  | course | score 
----+--------+--------+-------
  5 | 周润发 | 化学   |    87
 13 | 黎明   | 外语   |    95
  2 | 周润发 | 数学   |    99
 14 | 黎明   | 物理   |    90
  6 | 周星驰 | 语文   |    91
(5 rows)

# 注意：
在pg中，distinct关键字与select语句一起使用，用于去除重复记录。然而postgresql目前缺乏从有序索引中有效提取唯一值列表的能力, 它需要扫描整个索引来找到唯一的值。随着表的增长，这个操作会很慢。

# 查询某个字段大于某个阈值的记录有多少：
select sum(case when correlativity > 0.2 then 1 else 0 end )/sum(1.0) from public.collision_preliminary_result

# 查询结果为空，并赋值，赋初始值，默认值
select coalesce(sum(table_associated_num)/sum(1), 1) as table_associated_num,
coalesce(sum(scarcity)/sum(1), 1) as scarcity 
from db_name.table_name where flag=true;

# SQL 使用VALUES生成带数据的临时表：
SELECT * FROM (VALUES (123456),(123456),(123456),(123456),(123456)) AS t(c1);
select * FROM (
  VALUES (1,2,3,4,123456)
        ,(2,3,40000,5000,123456)
        ,(3,4222,5,6000,123456)
        ,(4,100,100,3,123456)
        ,(23,4,5,5,123456)
) AS t(c1,c2,c3,c4,c5);

# int类型，数字类型的模糊查询
select * from [表名] where cast([字段名] as char) like '%1%'
select * from newploay where cast(no2 as char) like '%1%'

# 时间类型的模糊查询 timestamp 
select * from [表名] where (TO_CHAR([字段名], 'yyyy-mm-dd hh24:mi:ss') LIKE '%2021%') 

select * from newploay where (TO_CHAR(no3, 'yyyy-mm-dd hh24:mi:ss') LIKE '%2021%') 

# 修改表注释：
表的备注信息增加：comment on table 表名  is '备注信息';

# 修改字段注释：
表的列名备注信息增加：comment on column 表名.列名  is '备注信息';

# update join 多表关联更新：
update a
set value = 'test'
from b,c
where
a.b_id = b.id
and b.c_id = c.id
and a.key = 'test'
and c.value = 'test';

