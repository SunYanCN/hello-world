
# 往PostgreSQL中插入数据时，报错：
org.postgresql.util.PSQLException: ERROR: duplicate key value violates unique constraint ...
Key (id)=(2245) already exists.

因为 postgresql 的自增id是通过序列 sequence来完成的，
所以清空数据后，还需要还原序列 sequence：
TRUNCATE db_name.table_name RESTART IDENTITY;

# ERROR:  must be owner of relation tb_door
解决方案，需要管理员用户登录；管理员postgres登录相应数据库

# union查询时候，报错：
ERROR: UNION types bigint and text cannot be matched
因为查询类型不一致所致
select a from t1
union all
values (null)
若a字段的类型是int, float, 则会报上面的错误；

# 安装pg_trgm插件报错：
psql: FATAL:  password authentication failed for user "postgres"
需要设置用户名为 postgres的用户，并用该用户进行 创建extension
~$ docker run -d -it -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=123456 -p 5432:5432 bitnami/postgresql:11.7.0-debian-10-r9
554e8358b3fb448b59083755c9539a7d91737ec90fafe2f40172a07b0c6c8b5d
~$ docker exec -it 554e8358b3f /bin/bash
I have no name!@554e8358b3fb:/$ psql -U postgres -h localhost
Password for user postgres:
psql (11.7)
Type "help" for help.

postgres=# create extension pg_trgm;
CREATE EXTENSION
postgres=#

# 使用相似度函数报错：
postgres=# select similarity('bwtigerte','bwhite');
ERROR:  function similarity(unknown, unknown) does not exist
LINE 1: select similarity('bwtigerte','bwhite');
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
问题原因即解决方案：
原因是因为对应的插件未启用，添加对应的插件即可：
postgres=# create extension pg_trgm;
CREATE EXTENSION
postgres=# select similarity('bwtigerte','bwhite');
 similarity
------------
   0.214286
(1 row)

# 问题：invalid locale name: "zh_CN.UTF-8"
postgres=# CREATE DATABASE db2
    WITH
    OWNER = postgres
    ENCODING = 'UTF8'
    LC_COLLATE = 'zh_CN.UTF-8'
    LC_CTYPE = 'zh_CN.UTF-8'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1;
ERROR:  invalid locale name: "zh_CN.UTF-8"
解决方法：
~# locale-gen zh_CN.UTF-8
~# locale -a 
# 查看是否支持 zh_CN.UTF-8
若还是不支持，则 重新设置locales，并选择 en_US.UTF-8 和 zh_CN.UTF-8 两项：
# dpkg-reconfigure locales
若 locale -a 支持了 zh_CN.UTF-8，则需要重启电脑，或者容器（否则不生效）
create database test2 with template template0 lc_collate "zh_CN.utf8" lc_ctype "zh_CN.utf8" encoding 'UTF8';

# 执行命令是报错：
ERROR:  role "tradedata" does not exist
解决方案，是创建对应的角色：
CREATE ROLE tradedata;
# 创建角色报错，则需要在命令行查看对应的角色：
trade=> \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}
 tradeopr  | Create DB                                                  | {}
发现压根就没有tradedata角色，所以报错。这个时候，切换到超级用户（上结果显示，当前超级账号是postgres），若不切换，可能就报下面的错误：
ERROR: permission denied to create role
# 在超级用户的角色下，添加有登录权限的角色：
trade=# CREATE ROLE tradeopr login;
有登录权限的角色，等同于用户；
create user role1 与create role role1 login 是等价的.

# PG插入数据报错：
### SQL: INSERT INTO public.dms_base_info(               base_info_guid,               cluster_name,               database_name,               project_uuid,               table_name,               table_name_cn,               column_guid,               column_name,               column_name_cn,               created_by,               updated_by,               created_date,               updated_date             )VALUES                       ON CONFLICT (base_info_guid) DO UPDATE         SET updated_date = now()
### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near "ON"
解析：
1、ON CONFLICT仅从PostgreSQL 9.5开始支持。
2、base_info_guid 字段需保证唯一性；
可以创建唯一索引：
CREATE UNIQUE INDEX UK_dms_base_info__base_info_guid 
ON dms_base_info (base_info_guid);
也可以在创建表的时候设置：
CREATE TABLE if not exists public.dms_base_info (
	base_info_guid varchar(64) NOT NULL, -- 主键ID
	cluster_name varchar(64) NULL, -- 集群名
	database_name varchar(64) NULL, -- 数据库名
	project_uuid varchar(64) NULL, -- 项目Uuid
	table_name varchar(128) NULL, -- 表英文名
	table_name_cn varchar(128) NULL, -- 表中文名
	column_guid varchar(64) NULL, -- 字段Guid
	column_name varchar(256) NULL, -- 字段英文名
	column_name_cn varchar(256) NULL, -- 字段中文名
	created_by varchar(100) NOT NULL DEFAULT 'SYSTEM'::character varying, -- 创建人
	updated_by varchar(100) NOT NULL DEFAULT 'SYSTEM'::character varying, -- 修改人
	created_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, -- 创建时间
	updated_date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, -- 更新时间
	CONSTRAINT dms_base_info_pkey PRIMARY KEY (base_info_guid)
);
若不是主键的话，也可以类似下面这样指定其唯一性，这里唯一字段是activity_name：
CREATE TABLE IF NOT EXISTS config_activity_log
(
  id                      serial primary key,
  activity_name           varchar(100) NOT NULL UNIQUE,
  last_config_version     varchar(50) NOT NULL,
  activity_status         varchar(100) NOT NULL DEFAULT 'Awaiting for cofman',
  cofman_last_update      bigint NOT NULL DEFAULT -1,
  is_error                boolean DEFAULT FALSE,
  activity_timestamp      timestamp DEFAULT current_timestamp
);

# postgresql命令行，查询的时候，结果都是空的，而且有时候正常语法，还报语法错误：
解决方法，清除一下缓存：
普通的 VACUUM 命令会清理死元组并回收空间，但不会释放操作系统的磁盘空间。它会标记这些空间为可用于未来的插入。这种操作是非阻塞的，可以在数据库正常运行时执行，不会对其他事务产生显著影响。
用法：
VACUUM;

# drop 一个表耗时非常久是怎么回事？
DROP TABLE是DDL命令，通常不会逐行删除，而是直接删除文件。不过如果表被其他会话锁定，或者有未完成的事务，DROP TABLE会被阻塞，导致延迟。
通过 SELECT * FROM pg_locks WHERE relation = 'tmp_table3'::regclass; 检查锁状态。
若查询结果不为空，则说明有锁表的情况发生；
user3=> SELECT * FROM pg_locks WHERE relation = 'tmp_table3'::regclass;
 locktype | database | relation | page | tuple | virtualxid | transactionid | classid | objid | objsubid | virtualtransaction | pid  |      mode       | granted | fastpath
----------+----------+----------+------+-------+------------+---------------+---------+-------+----------+--------------------+------+-----------------+---------+----------
 relation |    16398 |    16617 |      |       |            |               |         |       |          | 42/10889           | 4366 | AccessShareLock | t       | f
 relation |    16398 |    16617 |      |       |            |               |         |       |          | 47/47605           | 4345 | AccessShareLock | t       | f
 relation |    16398 |    16617 |      |       |            |               |         |       |          | 40/7962            | 4361 | AccessShareLock | t       | f
 relation |    16398 |    16617 |      |       |            |               |         |       |          | 46/1133            | 4389 | AccessShareLock | t       | f
 relation |    16398 |    16617 |      |       |            |               |         |       |          | 44/453             | 1070 | AccessShareLock | t       | f
(5 rows)
根据锁查询结果，该表正被5个进程（PID: 4366/4345/4361/4389/1070）以读模式（AccessShareLock）占用，导致 DROP TABLE 被阻塞。以下是解决方案：
强制终止阻塞进程（需超级用户权限）
-- 批量终止所有占用该表的进程

user3=> SELECT pg_terminate_backend(pid)
user3-> FROM pg_locks
user3-> WHERE relation = 'tmp_table3'::regclass
user3->   AND pid <> pg_backend_pid();
 pg_terminate_backend
----------------------
 t
 t
 t
(3 rows)

user3=> SELECT * FROM pg_locks WHERE relation = 'tmp_table3'::regclass;
 locktype | database | relation | page | tuple | virtualxid | transactionid | classid | objid | objsubid | virtualtransaction | pid | mode | granted | fastpath
----------+----------+----------+------+-------+------------+---------------+---------+-------+----------+--------------------+-----+------+---------+----------
(0 rows)
重试 DROP TABLE
user3=> drop table tmp_table3;
DROP TABLE


