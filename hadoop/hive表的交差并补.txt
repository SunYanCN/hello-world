
hive 求两个集合的差集
想要得到存在A中但是不存在B中的uid:
select a.uid from 
(select uid from tmp_zidali_500wan_fullinfo_new)a
left outer join
(select uid from temp_zidali_uid_num_maxvalue_rate)b
on a.uid=b.uid
where b.uid is null

外链接，求并集：
有三个表分别记录“宠物、养生、汽车”三类博主及其粉丝id，现在统计每个粉丝关注的各类博主数量：
select coalesce(cw.uid, ys.uid, qc.uid)as uid, cw.chongwu as chongwu, ys.yangsheng as yangsheng, qc.qiche as qiche
from (select uid, count(*) from db_name.chongwu_table group by uid)as cw
full outer join (select uid, count(*) from db_name.yangsheng_table group by uid) ys
on cw.uid=ys.uid
full outer join (select uid, count(*) from db_name.qiche_table group by uid) qc
on ys.uid=qc.uid;

# 内连接 inner join
内连接：只有进行连接的两个表中都存在与连接条件相匹配的数据才会被保留下来。
join默认是inner join, 如：
select * from teacher t inner join course c  on t.t_id = c.t_id;

# 带where条件内连接：
select t1.client_no, t2.party_no, nvl(t2.alias_party_no,t2.party_no) as party_id
from db1.table1 t1
JOIN db2.table2 t2
ON t1.party_no = t2.party_no
WHERE t1.client_no in ('abc123', 'abc125', 'abc136', 'abc321');

当两个表join 时，写在where 的过滤条件：
a. 如果是左表t1 则会先对 t1 进行过滤数据，然后再进行join 操作；
b. 但是对于右表 t2 表并没有对t2 进行过滤,即join操作后才对t2的where 进行过滤，这样如果t2表数据非常大的话，效率就会很低。
如果要对T2表进行先过滤的话，除了写子查询的模式,如下：
EXPLAIN
select t1.cust_pty_no,t2.amt
from a t1
left join (select * from b where busi_date='2020-04-17') t2
on t1.cust_pty_no = t2.cust_pty_no 
where t1.busi_date='2020-04-17' 

也可以写成如下形式：
EXPLAIN
select t1.cust_pty_no,t2.amt
from a t1
left join b t2
on t1.cust_pty_no = t2.cust_pty_no 
and b.busi_date='2020-04-17'
where t1.busi_date='2020-04-17' 

总结：
(1) 如果是对左表（a）字段过滤数据，则可以直接写在where后面，此时执行的顺序是：先对a表的where条件过滤数据然后再join b 表 ;
(2) 如果是对右表（b）字段过滤数据，则应该写在on 条件后面或者单独写个子查询嵌套进去，这样才能实现先过滤b表数据再进行join 操作；
如果直接把b表过滤条件放在where后面，执行顺序是：先对a表数据过滤，然后和b表全部数据关联之后，在reduce 阶段才会对b表过滤条件进行过滤数据，此时如果b表数据量很大的话，效率就会很低。因此对于应该在map 阶段尽可能对右表进行数据过滤。
（3）至于是否全表扫描取决于是否对表的分区字段过滤。这个具体从业务方面考虑是否需要对分区过滤，要想sql 高效那么尽可能在map阶段将不需要的数据过滤，减少后面资源的占用，提高效率

# 左外连接 left outer join
左外连接：
join操作符“左边表中”符合where子句的所有记录将会被返回。
右边表的指定字段没有符合条件的值的话，那么就使用null值替代。
案例实操：查询老师对应的课程
select * from teacher t left outer join course c on t.t_id = c.t_id;

# 右外连接 right outer join
右外连接：
join操作符“右边表中”符合where子句的所有记录将会被返回。
左边表的指定字段没有符合条件的值的话，那么就使用null值替代。
案例实操
select * from teacher t right outer join course c on t.t_id = c.t_id;

# 满外连接 full outer join
满外连接：
将会返回“所有表中”符合where语句条件的所有记录，实际上是取关联字段的并集。
如果任一表的指定字段没有符合条件的值的话，那么就使用null值替代。
案例实操
select * from teacher t full outer join course c on t.t_id = c.t_id;

# 多表连接
多个表使用join进行连接
注意：连接 n个表，至少需要n-1个连接条件。例如：连接三个表，至少需要两个连接条件。
案例实操
select * from teacher t
left join course c on t.t_id = c.t_id
left join score s on c.c_id = s.c_id
left join stu on s.s_id = stu.id;
多表连接查询，查询老师对应的课程，以及对应的分数，对应的学生

“把重复关联键少的表放在join前面做关联可以提高join的效率。”
写在关联左侧的表每有1条重复的关联键时底层就会多1次运算处理。
假设A表有一千万个id，平均每个id有3条重复值，那么把A表放在前面做关联就会多做三千万次的运算处理，这时候谁写在前谁写在后就看出性能的差别来了。

# 带条件多表关联：
select t1.a, t2.b, t3.c
from test1 t1
join test2 t2 on (t2.dt='2021' and t1.uid=t2.uid)
join test3 t3 on (t2.dt='2021' and t1.uid=t3.uid);

当两张表A和B在join时，条件筛选放在表join时的on上面和放在where上面得到的结果是不一样的。
如下创建两张表：
A表结构以及数据：
id  name    grade   dept
1   lijie1  100     10
2   lijie2  90      20
3   lijie3  60      10
4   lijie4  80      10
5   lijie5  70      20

B表结构以及数据：
id  name
10  IT1
20  IT2

1.两张表join并且筛选分数大于等于80的，条件放在join on上面
select 
    A.id,A.name,A.grade,A.dept,B.id,B.name 
from
    A left outer join B
on
    A.dept = B.id 
and 
    A.grade >=80 

结果为：
1   lijie1  100     10  10      IT1
2   lijie2  90      20  20      IT2
3   lijie3  60      10  NULL    NULL
4   lijie4  80      10  10      IT1
5   lijie5  70      20  NULL    NULL

2.两张表join并且筛选分数大于等于80的，条件放在where上面
select 
    A.id,A.name,A.grade,A.dept,B.id,B.name 
from
    A left outer join B
on
    A.dept = B.id
where
    A.grade >=80 

结果为：
1   lijie1  100     10  10      IT1
2   lijie2  90      20  20      IT2
4   lijie4  80      10  10      IT1
结论 
当把过滤条件写在left join on上面会让基表所有数据都能显示，不满足条件的右表会以null填充，当过滤条件写在where上只会让符合筛选条件的数据显示。
区别：
on 和 where 在筛选条件的时候，on 会显示所有满足 | 不满足条件的数据，而 where 只显示满足条件的数据。
原因是筛选条件没加on的话两张表是笛卡尔积，后面用where筛选出来符合条件的数据。
on后面加关联条件，可以加上where对关联出的数据进行一个筛选显示。
————————————————
注意：将“left join” 改为 “right join” 或 “inner join”，上面这种情况，左表的筛选条件放在on和放在where上面是一样的效果，都可以对最后的结果进行一个筛选；
将“left join ”改为“full join”，如同“left join”时一样，对左表的筛选条件，放在on上面没有筛选效果，放在where上面才有筛选效果；

至于为何会出现上面这样情况，主要是on与where同时存在时的执行顺序有关：
join 内连接：where 下的左表、右表筛选条件 -> on 下的条件关联数据
left join 左外连接： where 下的左表筛选条件 -> on下面的右表筛选条件 -> 进行left join -> where 下的右表条件
right join 右外连接： where 下的右表筛选条件 -> on下面的左表筛选条件 -> 进行right join -> where 下的左表条件
full join 满外连接： on下面的左表、右表筛选条件 -> 进行full join -> where下的左表、右表筛选条件
————————————————————————————————————————————————————————————————
在on条件下
join 内连接(默认是inner join)： 筛选条件严格，只要不满足on条件的这一项数据就不会显示出来，不论是哪个表的这一行数据-等值连接。
left join 左外连接： 左外连接就是在等值连接的基础上加上主表(左表)中的未匹配数据。
right join 右外连接： 右外连接是在等值连接的基础上加上被连接表(右表)的不匹配数据 。
full join 满外连接： 全外连接是在等值连接的基础上将左表和右表的未匹配数据都加上。在full join中不会自动添加join 键为is not null的条件
————————————————
没有where条件的inner join的结果，查看执行计划,查看执行过程详情：
explain SELECT  * from `user` u  inner join  department d  on d.id=u.department_id;
首先对inner join 后的右表(department)进行全表扫描，扫描到了n条数据，然后默认添加id is not null的过滤条件对其扫描到的n条数据进行过滤（自动优化，如果join下要保留null的行的话需要提前做特殊处理，不然默认就被优化掉了，会导致数据丢失），
最终得到过滤后还剩下的数据参与inner join。
然后对from后的左表(user)进行全表扫描，扫描到了m条数据，同样添加默认的过滤条件department_id is not null，最终得到数据参与inner join。

看一个有where条件和on条件下的结果，查看执行计划,查看执行过程详情：
SELECT  * from `user` u inner join  department d on d.id=u.department_id and d.count > 9 and u.age > 20 where u.age < 30;
首先扫描inner join 后的右表(department)，全表扫描n条数据，并对其进行过滤：((count > 9) and id is not null) ，过滤结果剩下数据进行inner join操作
然后扫描from后的左表(user)，也是全表扫描m条数据，并对其进行过滤((age > 20) and department_id is not null and (age < 30))，过滤剩下数据（这里是有误差的，hive的执行计划是一个大概的统计执行过程，不完全正确）进行inner join操作
小总结：inner join在不使用分区过滤的情况下，会对其两个表都进行全表扫描，然后自动为join的键（on d.id=u.department_id）添加is not null的过滤条件，然后在配合on和where后面的条件进行过滤，在inner join中where和on是同时进行过滤的。

分区表先进行分区过滤，然后对指定的分区进行全部扫描，然后再使用on和where以及自动添加的is not null条件进行过滤，过滤后的数据才进行inner join;
使用分区过滤的区别就是在对表进行扫描的时候是扫描全部还是扫描指定的分区，如果没有分区过滤，则扫描全表，否则，只对指定的分区进行扫描。
在inner join下，如果where条件中使用了分区过滤，则扫描指定的分区的数据，然后在通过where和on条件进行过滤，以及为join的键（on d.id=u.department_id）添加is not null的过滤条件
（这里需要注意的是join键为null的数据是否要保留，需要保留的话，就需要对join键进行特殊的处理，否则数据则被过滤掉，导致数据丢失），这里on和where是同时过滤的，不区分先后。

————————————————————————————————————————————————————————————————
非空查找函数：
语法: COALESCE(T v1, T v2, …)
说明: 返回参数中的第一个非空值，从左到右返回第一个不为NULL的值，如果所有值都为NULL，那么返回NULL。

# Hive使用LEFT OUTER JOIN 实现not in 子句
HIVE 不支持 not in 中包含查询子句的语法，形如如下的HQ语句是不被支持的: 
查询在key字段在a表中，但不在b表中的数据 
select a.key from a where key not in(select key from b)
可以通过left outer join进行查询,（假设B表中包含另外的一个字段 key1 
select a.key from a left outer join b on a.key=b.key where b.key1 is null

# LEFT SEMI JOIN （左半连接）是 IN/EXISTS 子查询的一种更高效的实现。
Hive 当前没有实现 IN/EXISTS 子查询，所以你可以用 LEFT SEMI JOIN 重写你的子查询语句。
LEFT SEMI JOIN 的限制是， JOIN 子句中右边的表只能在 ON 子句中设置过滤条件，在 WHERE 子句、SELECT 子句或其他地方过滤都不行。
SELECT a.key, a.value FROM a WHERE a.key in (SELECT b.key FROM B);
可以被重写为：
SELECT a.key, a.val FROM a LEFT SEMI JOIN b on (a.key = b.key)
特点
1、left semi join 的限制是， JOIN 子句中右边的表只能在 ON 子句中设置过滤条件，在 WHERE 子句、SELECT 子句或其他地方过滤都不行。
2、left semi join 是只传递表的 join key 给 map 阶段，因此left semi join 中最后 select 的结果只许出现左表。
3、因为 left semi join 是 in(keySet) 的关系，遇到右表重复记录，左表会跳过，而 join 则会一直遍历。这就导致右表有重复值得情况下 left semi join 只产生一条，join 会产生多条，也会导致 left semi join 的性能更高。 
4、最后 select 的结果只许出现左表。


