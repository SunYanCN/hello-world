1、运行python程序时报错：
提示“SyntaxError: Non-ASCII character '\xe8' in file”
解决方法：
在文件头部加上：
# -*- coding: utf-8 -*-

2、python3, print函数报错：
>>> print(code)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
UnicodeEncodeError: 'ascii' codec can't encode character '\u5408' in position 0: ordinal not in range(128)

解决方案：
root@6c6656292234:~# export LANG=en_US.UTF-8
root@6c6656292234:~# export PYTHONIOENCODING=UTF-8

问题：终端的输出不能重定向到文件
在脚本中运行： nohup python3 -u main.py 2>&1 > train.log &
不能将终端显示的内容重定向到文件 train.log ; 但直接在终端训练命令，却有输出。
原因是python缓存机制，虽然stderr和stdout默认都是指向屏幕的，但是stderr是无缓存的，程序往stderr输出一个字符，就会在屏幕上显示一个；而stdout是有缓存的，只有遇到换行或者积累到一定的大小，才会显示出来。
解决方案：-u参数的使用
python命令加上-u（unbuffered）参数后会强制其标准输出也同标准错误一样不通过缓存直接打印到屏幕。
上命令改成下面这个即可解决： nohup python3 -u main.py 2>&1 > train.log &

# Python 3.5.3 使用 pathlib 读取文件时，明明文件存在，却报错：
TypeError: invalid file: PosixPath('/home/gswyhq/data/Fashion-Mnist/train-images-idx3-ubyte')
解决方案：
将 with open(DATA_PATH / "train-images-idx3-ubyte", 'rb') as file_object:
改为： with open(str(DATA_PATH / "train-images-idx3-ubyte"), 'rb') as file_object: 


错误：python, print, f开头的字符串，语法错误；
    print(f'Logging Info - Reading item2entity file: {file_path}' )                                                                ^
SyntaxError: invalid syntax
原因，python 版本不对
Python 3.6版本以后允许在字符串前置f的形式代替 .format语句

# python 代码检查都是正常的，但是报错：
ValueError: bad marshal data (unknown type code)
问题原因，重命名了路径或文件名所致
解决方案：对应的模块目录下的.pyc文件删除 
find . -name "__pycache__" |xargs -i rm -rf {}

# pip3 install *** 安装包时出现错误：
No matching distribution found for pytest-runner
# 解决方法
pip3 install pytest-runner
pip3 install librosa

# python -m ***.***.py 出错：
 Error while finding module specification for '***.***.py' (AttributeError: module 'sql_app.main' has no attribute '__path__')
问题原因及解决方法：
如上面的命令所示，Python -m指的是把这个.py文件当做模块运行，但如果你一不小心加了.py这个后缀，就会出现这个错误。其实你要么把"-m"删除，要么删除".py"后缀，问题就迎刃而解了

# from . import ***出错：
/home/mobsuper_project $ tree
.
+--- sql_app
|   +--- crud.py
|   +--- database.py
|   +--- main.py
|   +--- models.py
|   +--- schemas.py
|   +--- __init__.py
+--- sql_app.db
                                                                                                                                                                                                                    ✔/home/mobsuper_project $ python sql_app/main.py
Traceback (most recent call last):
  File "sql_app/main.py", line 8, in <module>
    from . import crud, models, schemas
ImportError: cannot import name 'crud'
解决方法：
采用-m参数，把这个.py文件当做模块运行即可
/home/mobsuper_project $ python -m sql_app.main

# 问题，运行python 文件出现错误：
SyntaxError: Non-UTF-8 code starting with '\xe5' in file
解决方法：
在.py文件第一行或第二行加上：
# coding:utf-8
写成： #encoding='utf-8' 是不可以的，因为不满足匹配规则：
在第一行或者第二行的声明都要符合正则表达式
"coding[:=]\s*([-\w.]+)"



# pip3 install sentencepiece 安装报错：
Failed to find sentencepiece pkg-config

# 解决方法，下载对应的whl文件安装；
https://pypi.org/project/sentencepiece/#files
pip3 install sentencepiece-0.1.96-cp36-cp36m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl

# 安装whl文件报错：
提示错误：平台版本不对，如下。
sentencepiece-0.1.96-cp36-cp36m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl is not a supported wheel on this platform.
解决方法：
1、首先通过pip检查工具检查你电脑的接受安装的标签：
这个地方需要根据你的电脑使用命令：
~$  python
>>> import pip._internal
>>> print(pip._internal.pep425tags.get_supported())

win32
~$ python
>>> import pip
>>> print(pip.pep425tags.get_supported())
2、修改需要安装的包名格式
mv sentencepiece-0.1.96-cp36-cp36m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl sentencepiece-0.1.96-cp36-cp36m-manylinux_2_17_x86_64.manylinux1_x86_64.whl
3、安装重命名后的whl文件
pip3 install sentencepiece-0.1.96-cp36-cp36m-manylinux_2_17_x86_64.manylinux1_x86_64.whl

# 问题，通过如下给字段赋值，赋值存在问题：
ds = {}
ts = [1,2,3]
ds['key'] = ts.copy()
当ts占据空间较小时候，不存在问题；但ts包含数据比较多时候，存在问题：
会出现赋值之后，ts的值改变后，ds的值也会改变；
应该改为：
import copy 
ds[key] = copy.deepcopy(ts)
主要原因：
list2 = list1.copy()
list3 = list1[:]
list4 = copy.deepcopy(list1)
这里，list2 和 list3 都是list1的浅拷贝；list4是深拷贝。
python的list里面存的都是引用，如果存的是listnode，实际上存的是listnode的引用，也就是地址，毕竟如果listnode里存了很多关于这个node的信息的话，直接在list里面存这段信息的地址就很方便，等到要用这段信息的时候（比如list1[0].val），只要找到地址(list1[0])再到这段地址取值(.val)就可以了。
浅拷贝的意思是，开辟一段内存，这段内存里复制了原list的地址。
地址还是那个地址，所以可以看出**id(list1[0]),id(list2[0])**是完全一样的。这会带来的问题是，当我们把这段地址里的值.val变化一下(list1[0].val = 5), 浅拷贝的数组里对应元素的值也就跟着变了

深拷贝就厉害了，不光把原数组存的地址拷贝了，就连原数组地址里对应的数据也都进行了复制，所以可以看到**id(list1[0]),id(list4[0])**变得不一样了


