
WITH语句给cypher提供了强大的pipeline能力，可以一个或者query的输出，或者下一个query的输入 和RETURN语句非常类似，唯一不同的是，WITH的每一个结果，必须使用别名标识。
通过这个功能，我们可以轻而易举的做到在查询结果里面在继续嵌套查询。

MATCH (person:Person)-[:ACTED_IN]->(m:Movie)
WITH person, count(*) AS appearances, collect(m.title) AS movies
WHERE appearances > 1RETURN person.name, appearances, movies


1.1 对聚合结果过滤

MATCH (david { name: "David" })--(otherPerson)-->()
WITH otherPerson, count(*) AS foaf
WHERE foaf > 1
RETURN otherPerson

代码块解释：（1）MATCH与”David”关联（无向）的otherPerson；（2）然后RETURN出度大于1的otherPerson。

1.2 对collect的元素进行排序

MATCH (n)
WITH n
ORDER BY n.name DESC LIMIT 3
RETURN collect(n.name)

代码块解释：（1）MATCH所有人；（2）对所有人的name进行降序排列，并取top-3；（3）返回top-3的name并组成collect：返回结果为：[“Emil”,”David”,”Ceasar”]

1.3 在路径搜索的时候限制分支数

MATCH (n { name: "Anders" })--(m)
WITH m
ORDER BY m.name DESC LIMIT 1
MATCH (m)--(o)
RETURN o.name

代码块解释：（1）从”Anders”出发，找到关联（无向）的所有人的集合m；（2）对集合m按照name降序排列，取top-1；（3）返回与top-1关联（无向）的所有人的name。

MATCH (n1)-[r]->(n:Qingjing) WITH labels(n1) as l, count(*) as count WHERE count > 1  RETURN l, count

CALL apoc.help("apoc") YIELD name, text
WITH * WHERE text IS null
RETURN name AS undocumented

例17:WITH语句使用使用示例
WITH语句是将第一部分匹配的输出作为下一部分匹配的输入。
1.查找有十个以上朋友的张姓男子

  MATCH (user)-[:FRIEND]-(friend)
  WHERE user.name =~ '张.*'
  WITH user, count(friend) AS friends
  WHERE friends > 10
  RETURN user
2.WITH语句中使用ORDER BY、SKIP 和 LIMIT 语句示例。

MATCH (user)-[:FRIEND]-(friend)
WITH user, count(friend) AS friends
ORDER BY friends DESC
SKIP 1
  LIMIT 3
RETURN user

# 查找到最短路径，再在最短路径上继续查询：
CREATE
  (offer: Offer),
  (sch1: Schedule),
  (sch2: Schedule),
  (stop1: Stop {name: "stop1"}),
  (stop2: Stop {name: "stop2"}),
  (stop3: Stop {name: "stop3"}),
  (stop4: Stop {name: "stop4"}),
  (stop1)-[:SWITCH_TO]->(stop2),
  (stop2)-[:CONNECTED_BY]->(stop3),
  (stop3)-[:SWITCH_TO]->(stop4),
  (stop2)-[:SCHEDULED_BY]->(sch1),
  (stop3)-[:SCHEDULED_BY]->(sch2),
  (sch1)-[:OFFERED_BY]->(offer),
  (sch2)-[:OFFERED_BY]->(offer)

MATCH
  (from:Stop {name:'stop1'}), (to:Stop {name:'stop4'}),
  path = allShortestPaths((from)-[r*]->(to))
UNWIND nodes(path) AS stopNode
OPTIONAL MATCH (stopNode)-[sb:SCHEDULED_BY]->(schedule:Schedule)-[ob:OFFERED_BY]-(offer:Offer)
RETURN stopNode, sb, ob, schedule, offer

# 根据节点连接的关系类型数量过滤（注意是数量是不是某种类型）
MATCH (n:Item) -[r]- ()
WITH DISTINCT n, type(r) AS relType
WITH n, collect(relType) AS relTypes
WHERE size(relTypes) > 10 RETURN n,relTypes LIMIT 25

# 根据两个值，查询其对应的最短路径：
MATCH p = shortestPath((n1:T7_site_web1_ai_150)-[*..4]- (n2) ) WHERE n1.name =~ "条件1" and n2.name =~ "条件2"  RETURN p
上句会查找所有满足条件的节点，再返回节点之间的最短路径；
有时候，并不是希望返回所有的最短路径，而是在最短路径中，筛选最短路径；
profile MATCH p = shortestPath((n1:T7_site_web1_ai_150)-[*..4]- (n2) )
WHERE n1.name =~ ".{0,15}生物公司.{0,15}" and  n2.name = "3285" and not n1 = n2
WITH collect(p) as ps, min(length(p)) as len
UNWIND ps as p1 WITH p1, len WHERE length(p1)=len RETURN p1

# 查询最后的关系为`理赔金额`，中间经过了节点`身故保险金`的最短的一条路径
MATCH p=(n)-[*0..9]->()-[r:`理赔金额`]-(n1) 
WHERE ANY(x in nodes(p) WHERE x.name='身故保险金') and not ()-->(n) 
WITH p, length(p) as len_p 
RETURN extract(n IN nodes(p)| n.name) AS extracted
ORDER BY len_p limit 1

# 查询最后的关系为`理赔金额`，中间经过了节点`身故保险金`的所有最短路径
MATCH p=(n)-[*0..9]->()-[r:`理赔金额`]-(n1) 
WHERE ANY(x in nodes(p) WHERE x.name='身故保险金') and not ()-->(n) 
WITH collect(p) as ps, min(length(p)) as min_len UNWIND ps as p WITH p, min_len WHERE length(p)=min_len
RETURN extract(n IN nodes(p)| n.name) AS extracted

# 对查询结果的路径长度进行筛选：
profile MATCH p = shortestPath((n1:T7_site_web1_ai_150)-[*..4]- (n2) )
WHERE n1.name =~ ".{0,15}生物公司.{0,15}" and  n2.name = "3285" and not n1 = n2
WITH collect(p) as ps, length(p) as len
UNWIND ps as p1 WITH p1, len WHERE len=2 RETURN p1

# 按路径长度进行升序排列：
PROFILE MATCH p = shortestPath((n1:T7_site_web1_ai_150)-[*..4]- (n2) )
WHERE n1.name =~ ".{0,15}生物公司.{0,15}" and  n2.name = "3285" and not n1 = n2
RETURN p,length(p)
ORDER BY length(p)

MATCH (n:mechword{name:'生物工程'}),(m:mechword{name:'现代化'})
WITH n,m
MATCH p=shortestPath((n)-[r*..]-(m))
UNWIND nodes(p) as nn
WITH p,min(length(nn.name))as a
UNWIND nodes(p) as mm
WITH mm
WHERE length(mm.name)=a
RETURN mm.name;

使用WITH 可以达到管道命令的效果
查询论文的第一作者及最少引用次数：
MATCH (p:Paper)-[:`第一作者`]->(a:Author)
WITH a, p, size((p)-[:`被引用`]->()) as numCit
WITH a, min(numCit) as minCitations
RETURN a.authorName as authorName, minCitations
ORDER BY a.authorName

call apoc.index.nodes('Tongyonggraph','name:天龙八部') YIELD node
WITH node as n
MATCH (n)-[r:`主演`]->(m)
RETURN n, m

# 返回作者的最小引用次数及每篇论文的标题及引用次数：
MATCH (p:Paper)-[:`第一作者`]->(a:Author)
WITH a, p, size((p)-[:`被引用`]->()) as numCit
WITH a, min(numCit) as minCitations, collect(p {.title, numCit}) as papers
UNWIND papers as paper
RETURN a.authorName as authorName, minCitations, paper.title as title, paper.numCit as numCit
ORDER BY authorName

# 先查询关系，再统计关系数(间接达到管道命令的效果)：
CALL db.relationshipTypes() YIELD relationshipType as type
CALL apoc.cypher.run('MATCH ()-[:`'+type+'`]->() RETURN count(*) as count',{}) YIELD value
RETURN type, value.count

通过管道操作符进行过滤操作：
MATCH p1=(a:Tca {name:"糊糊酸"})-[*..1]-() MATCH p2=(b:Tca {name:"柠檬酸"})-[*..1]-() OPTIONAL MATCH q=(a)-[*..2]-(b)  UNWIND extract(x IN [q, p1, p2] | x ) as s RETURN s limit 2;
╒═══════════════════════════════════╕
│"s"                                │
╞═══════════════════════════════════╡
│null                               │
├───────────────────────────────────┤
│[{"name":"糊糊酸"},{},{"name":"延胡索酸"}]│
└───────────────────────────────────┘

MATCH p1=(a:Tca {name:"糊糊酸"})-[*..1]-() MATCH p2=(b:Tca {name:"柠檬酸"})-[*..1]-() OPTIONAL MATCH q=(a)-[*..2]-(b)  UNWIND extract(x IN [q, p1, p2] | x is null ) as s RETURN s limit 2;
╒═════╕
│"s"  │
╞═════╡
│true │
├─────┤
│false│
└─────┘

MATCH p1=(a:Tca {name:"糊糊酸"})-[*..1]-() MATCH p2=(b:Tca {name:"柠檬酸"})-[*..1]-() OPTIONAL MATCH q=(a)-[*..2]-(b)  UNWIND [x IN [q, p1, p2] WHERE not x is null | x ] as s RETURN s limit 2;
╒═══════════════════════════════════╕
│"s"                                │
╞═══════════════════════════════════╡
│[{"name":"糊糊酸"},{},{"name":"延胡索酸"}]│
├───────────────────────────────────┤
│[{"name":"柠檬酸"},{},{"name":"顺乌头酸"}]│
└───────────────────────────────────┘

# 查找最近一次（筛选、过滤）的股东变动情况，并将变动的股东，按照股东类型及名次排序：
MATCH (n:Company)-[r:`股东变动`]->(m:Holder)
WHERE n.name='富瑞特装'
WITH max(datetime(m.`报告时间`)) as max_time, collect(m) as holders
UNWIND holders as holder
WITH max_time, holder
WHERE datetime(holder.`报告时间`) = max_time
RETURN max_time, holder.`股东名次`, holder.`股东类型`
ORDER BY [holder.`股东类型`, holder.`股东名次`]

# 上句等同于下面的结果
MATCH (n:Company)-[r:`股东变动`]->(m:Holder)
WHERE n.name='富瑞特装'
WITH n, max(datetime(m.`报告时间`)) as max_time
OPTIONAL MATCH(n:Company)-[r:`股东变动`]->(holder:Holder)
WHERE datetime(holder.`报告时间`) = max_time
RETURN max_time, holder.`股东名次`, holder.`股东类型`
ORDER BY [holder.`股东类型`, holder.`股东名次`]

# 查询某个节点，但其关联节点不能出现某种条件的节点：
match (n:Abstract) where id(n) = 437524
match p=(n0)-[r1:`抽象化`]->(n)-[r2:`因果`]-(n1:Abstract) 
match (n1)<-[:`抽象化`]-(n2) 
with collect(n2) as n2_ids, r1,r2,n1,n0,n
where not any(x in n2_ids where id(x) in [r2.cause_id, r2.effect_id])
return r1,r2,n1,n0,n limit 10

# 第一层需要主营产品日期最近的节点关系图。第二层关系，需要获取profit字段和data_date最大值的节点
MATCH (c1:company)-[r1: `主营产品`]->(p1:product)
where  c1.name_short="平安银行" 
with p1,c1
match (c2:company)-[r3: `主营产品`]->(p1) 
with p1,c1, max([r3.data_date, r3.profit]) as max_r3, collect([c2, r3]) as c2r3_list
UNWIND c2r3_list as c2r3
with c2r3[0] as c2, c2r3[1] as r3, max_r3, p1,c1
where [r3.data_date, r3.profit] = max_r3
return distinct c1.name, p1.name, max_r3,c2.name

