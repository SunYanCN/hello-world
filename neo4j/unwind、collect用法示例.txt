
Cypher为列表提供了相当遍历的操作，如range, collect, unwind, reduce, extract, filter, size等

# range, 可用于生成一个列表:
RETURN range(0, 10), range(2, 18, 3)

# Collect将所有值收集到一个集合list中。
WITH [1, 1, 2, 2] AS coll
UNWIND coll AS x
WITH DISTINCT x
RETURN collect(x) AS SET

# unwind,将一个列表拆解为单个值：
UNWIND[1,2,3] AS x
RETURN x
输入的列表，输出的是单个元素

# 列表元素去重
WITH [1, 1, 2, 2] AS coll
UNWIND coll AS x
WITH DISTINCT x
RETURN x

╒═══╕
│"x"│
╞═══╡
│1  │
├───┤
│2  │
└───┘

# 变量多个列表：
WITH [1, 2] AS a,[3, 4] AS b
UNWIND (a + b) AS x
RETURN x

# 上式等同于：
UNWIND [1,2,3,4] AS x RETURN x
╒═══╕
│"x"│
╞═══╡
│1  │
├───┤
│2  │
├───┤
│3  │
├───┤
│4  │
└───┘

# 对列表中的元素进行筛选：
WITH ['John', 'Mark', 'Jonathan', 'Bill'] AS somenames
UNWIND somenames AS names
WITH names AS candidate
WHERE candidate STARTS WITH 'Jo'
RETURN candidate

╒═══════════╕
│"candidate"│
╞═══════════╡
│"John"     │
├───────────┤
│"Jonathan" │
└───────────┘

# 嵌套列表的解析，输出列表中的元素：
WITH [[1, 2],[3, 4], 5] AS nested
UNWIND nested AS x
UNWIND x AS y
RETURN y

╒═══╕
│"y"│
╞═══╡
│1  │
├───┤
│2  │
├───┤
│3  │
├───┤
│4  │
├───┤
│5  │
└───┘

# 变量路径：
match p=(n:Person{name:"p1"})-[*1..5]-(m)
unwind nodes(p) as x
return x

Match (n)-[r:`下一步`]->(c)
with collect(n) + collect(c) as colC, collect(r) as colR UNWIND colC AS n with distinct n, colR return n, colR


Match (n)-[r:`下一步`]->(c)
with collect(n) + collect(c) as colC, collect(r) as colR UNWIND colC AS n2 with distinct n2, colR with collect(n2) as colN, colR
CALL apoc.export.csv.data(colN,colR, '/var/lib/neo4j/import/export_nodes_rels.csv',{format:'plain'}) YIELD nodes, relationships
RETURN nodes, relationships

# 笛卡尔积-展开两个列表其结果为笛卡尔积
unwind [1,2,3,4] as x
unwind ['a','b','c','d'] as y
return x,y

# 笛卡尔积-多个with子查询的结果会以笛卡尔积的方式形成最终查询的结果
match (m:vertices) where m.id in [111,222,333]
with m
match (m:vertices) where m.id in [444,555,666]
with m,n
return m,n

# 笛卡尔积-match中的多个变量也是以笛卡尔积形式返回
match (m:vertices:{type:'a'}),(n:vertices{type:'b'}) return m, n;

# 统计每个标签有多少个节点：
UNWIND ['Baoxiangongsi', 'Baoxianchanpin', 'Baozhangxiangmu', 'Baoquanxiangmu', 'Fuwuwangdianmingcheng', 'Yiwai', 'Jibing', 'Shiyi', 'Didian'] as label
CALL apoc.cypher.run('MATCH (:`'+label+'`) RETURN count(*) as count',{}) YIELD value
RETURN label, value.count

╒═══════════════════════╤═════════════╕
│"label"                │"value.count"│
╞═══════════════════════╪═════════════╡
│"Baoxiangongsi"        │39           │
├───────────────────────┼─────────────┤
│"Shiyi"                │11625        │
├───────────────────────┼─────────────┤
│"Didian"               │34341        │
└───────────────────────┴─────────────┘

 假设我们想在图中找到两个年龄最大的人和他们最近出演的三部电影。这需要用到 LIMIT 和 collect() 以及 ORDER BY 的组合。

// Get the two oldest people.
MATCH (actor:Person)
WITH actor
ORDER BY actor.born
LIMIT 2

// Get their three most recent movies.
MATCH (actor)-[:ACTED_IN]->(movie:Movie)
WITH actor, movie
ORDER BY movie.released DESC
RETURN actor.name, 2016 -actor.born AS age, collect(movie.title)[..3] AS movies;

如果返回这些演员和电影的笛卡尔积(所有组合);这就是 UNWIND 的作用所在，如果您想继续查询，并与已经查询的演员和电影编写更多 MATCH 语句，它就非常有用了。

// Get the two oldest people.
MATCH (actor:Person)
WITH actor
ORDER BY actor.born
LIMIT 2

// Get their three most recent movies.
MATCH (actor)-[:ACTED_IN]->(movie:Movie)
WITH actor, movie
ORDER BY movie.released DESC
WITH actor, collect(movie)[..3] AS m

// Unwind the collection into rows.
UNWIND m AS movie
RETURN actor.name, 2016 -actor.born AS age, movie.title;

# 模糊查找一个字符串，返回对应的权重及最大权重；
CALL apoc.index.search("abstract", "Abstract.name:瑞幸财务造假~") YIELD node, weight
with max(weight) as max_weight, collect([node, weight]) as nodes_weights
UNWIND nodes_weights AS nodes_weight
with nodes_weight[0] as node, nodes_weight[1] as weight, max_weight
return distinct node.name, weight, max_weight

# 模糊查找一个字符串，返回对应的权重最大值，及关系数最大值；
CALL apoc.index.search("abstract", "Abstract.name:瑞幸财务造假~") YIELD node, weight
with max(weight) as max_weight, collect([node, weight]) as nodes_weights
UNWIND nodes_weights AS nodes_weight
with nodes_weight[0] as node, nodes_weight[1] as weight, max_weight
match(node)-[r:`因果`]-(:Abstract) with count(r) as num, node, weight, max_weight
with max(num) as max_num, collect([node, weight, num, max_weight]) as nodes_weights
UNWIND nodes_weights AS nodes_weight
with max_num, nodes_weight[0] as node, nodes_weight[1] as weight, nodes_weight[2] as num, nodes_weight[3] as max_weight
return distinct node.name, weight, num, max_weight, max_num

# 模糊搜索，优先是看搜索的结果是否是子串，再看搜索权重及关系数；
CALL apoc.index.search("abstract", "Abstract.name:瑞幸财务造假~") YIELD node, weight
match (node) -[r]->(:Abstract)
with node as n, weight, count(r) as num
order by [all(x IN split(n.name, "") where "瑞幸财务造假" CONTAINS x) and length(n.name) >=4, weight, num] desc
limit 10
RETURN n.name, weight, num

# 将字符串转换为列表：
return split('你好中国', '')
["你", "好", "中", "国"]

# 并行查找，返回每个结果的top10,但该方法速度堪忧，还不如分开查找：
UNWIND [ "土地房地产","价格上涨"] AS event 
CALL db.index.fulltext.queryNodes('db_abstract', event) YIELD node, score
WITH event as name, node
ORDER BY score DESC
WITH name, COLLECT(node)[0..10] AS n
return name, n

