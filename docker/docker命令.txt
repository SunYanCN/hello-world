
Docker 命令

Docker命令采用docker-CMD或docker CMD方式执行
docker-attach # 依附到一个正在运行的容器中
docker-build # 从一个Dockerfile创建一个镜像
docker-commit # 从一个容器的修改中创建一个新的镜像
docker-create # 创建一个新容器，但是不运行它
docker-cp #从容器中复制文件到宿主系统中
docker-diff # 检查一个容器文件系统的修改
docker-events # 从服务端获取实时的事件
docker-exec # 在运行的容器中植入广告
docker-export # 导出容器内容为一个tar
docker-history # 显示一个镜像的历史
docker-images # 列出存在的镜像
docker-import # 导入一个文件路径或目录来创建一个镜像
docker-kill # 关闭一个运行中的容器
docker-load #从一个tar中加载镜像
docker-login # 注册或登录到一个Docker的仓库服务器
docker-logout # 从Docker的仓库服务器登出
docker-logs # 获取容器的log信息
docker-pause #暂停一个容器中的所有进程
docker-ps # 列出容器
docker-pull # 从Docker的仓库服务器下拉一个镜像或者仓库
docker-push # 将一个镜像或仓库推送到一个Docker的注册服务器
docker-restart # 重启一个运行中的容器
docker-rm # 删除指定的若干容器
docker-rmi # 删除指定的镜像
docker-run # 创建一个新容器，并在其中运行给定命令
docker save # 保存一个镜像为tar包文件
docker-search # 在Docker index中搜索一个镜像
docker-start # 启动一个容器
docker-tag # 为镜像打标签
docker-unpause # 将一个容器内所有的进程从暂停状态中恢复
docker-version # 输出Docker的版本信息


登录es的docker：
sudo docker run -it ambbr-es:2017-02-14  /bin/bash

进入某个docker：
sudo docker attach  cfc99817d125

向镜像内传递文件：
gow@gzcloud:~/gswewf$ sudo docker run -it -v /home/gow/gswewf/elasticsearch-analysis-ik-5.1.1:/usr/share/elasticsearch/plugins/elasticsearch-analysis-ik-5.1.1 ambbr-es:2017-02-14  /bin/bash

docker容器中查看容器linux版本:
有时候需要登陆容器搞点事情，这时候需要看容器系统的版本，那么一条命令就能完成。 
正确的姿势： 
cat /etc/issue
错误的姿势: 
cat /proc/version 或 uname -a ，这样查到的是宿主机的系统。

# 修改运行中的docker容器的端口映射的三种方法：
方法一：删除原有容器，重新建新容器
这个解决方案最为简单，把原来的容器删掉，重新建一个。当然这次不要忘记加上端口映射。

方法二：修改容器配置文件，重启docker服务
容器的配置文件路径：
/var/lib/docker/containers/[hash_of_the_container]/hostconfig.json
    其中的hashofthecontainer是docker镜像的hash值，可以通过docker ps或者docker inspect containername查看。（CONTAINER ID就可以看出来）
文件中其中有一项是PortBindings，其中8080/tcp对应的是容器内部的8080端口，HostPort对应的是映射到宿主机的端口9190。8361/tcp对应的是容器内部的8361端口，HostPort对应的是映射到宿主机的端口9191。按需修改端口，然后重启docker服务，再启动容器服务就可以了。
~$ systemctl restart docker
优缺点：这个方法的优点是没有副作用，操作简单。缺点是需要重启整个docker服务，如果在同一个宿主机上运行着多个容器服务的话，就会影响其他容器服务。

方法三：利用docker commit新构镜像
    docker commit：把一个容器的文件改动和配置信息commit到一个新的镜像。这个在测试的时候会非常有用，把容器所有的文件改动和配置信息导入成一个新的docker镜像，然后用这个新的镜像重起一个容器，这对之前的容器不会有任何影响。
1、停止docker容器
docker stop container01
2、commit该docker容器
docker commit container01 new_image:tag
3、用前一步新生成的镜像重新起一个容器
docker run --name container02 -p 80:80 new_image:tag
优缺点：这种方式的优点是不会影响统一宿主机上的其他容器，缺点是管理起来显得比较乱，没有第二种方法那么直观。

# docker容器日志如何重定向到文件：
docker logs postgresql-15432 > pg.log
docker logs postgresql-15432 |tee pg.log
上面两种方法都是无效的，需要使用：
script -c "docker logs postgresql-15432" pg.log


