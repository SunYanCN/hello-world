#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json, os
import random
from sklearn import neighbors
from sklearn import datasets

from sklearn.cluster import KMeans, DBSCAN, MiniBatchKMeans, MeanShift
from sklearn.datasets import load_iris
import numpy as np
import math
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from scipy.spatial.distance import pdist, squareform

from sklearn.cluster import AgglomerativeClustering
from sklearn.neighbors import kneighbors_graph
from pylab import mpl
mpl.rcParams['font.sans-serif'] = ['SimHei'] #指定默认字体   
mpl.rcParams['axes.unicode_minus'] = False #解决保存图像是负号'-'显示为方块的问题

def test_knn():
    knn = neighbors.KNeighborsClassifier()
    iris = datasets.load_iris()
    knn.fit(iris.data,iris.target)
    predictedLabel = knn.predict([[0.1,0.2,0.3,0.4]])
    print(predictedLabel)


def show_datas(datas, datas2=None):
    plt.figure()
    if datas2:
        ax = plt.subplot(1, 2, 1)
        # specify marker shapes for different clusters
        data_dict = {}
        for lng, lat, name in datas:
            data_dict.setdefault(name, [])
            data_dict[name].append([lng, lat, name])
        for name, X in data_dict.items():
            ax.scatter([x for x, y, _ in X], [y for x, y, _ in X])
        ax1 = plt.subplot(1, 2, 2)
        # specify marker shapes for different clusters
        data_dict = {}
        for lng, lat, name in datas2:
            data_dict.setdefault(name, [])
            data_dict[name].append([lng, lat, name])
        for name, X in data_dict.items():
            ax1.scatter([x for x, y, _ in X], [y for x, y, _ in X])
    else:
        ax = plt.subplot(1, 1, 1)
        # specify marker shapes for different clusters
        data_dict = {}
        for lng, lat, name in datas:
            data_dict.setdefault(name, [])
            data_dict[name].append([lng, lat, name])
        for name, X in data_dict.items():
            ax.scatter([x for x, y, _ in X], [y for x, y, _ in X])

    plt.show()

def remove_data(all_data_list):
    '''根据knn, 进行预测，若判断类别不一致，则删除'''
    knn = neighbors.KNeighborsClassifier(n_neighbors=5)
    datas, labels = [], []
    for lng, lat, name in all_data_list:
        datas.append([lng, lat])
        labels.append(name)
    knn.fit(datas, labels)
    predictedLabel = knn.predict(datas)
    probabilities = knn.predict_proba(datas)
    new_datas = []
    for data, label, pred, probabilitie in zip(datas, labels, predictedLabel, probabilities):
        if label == pred:
            new_datas.append([data[0], data[1], label])
        # if label != pred:
        #     print(data)
    return new_datas

def knn_remove_point(datas, size=50):
    '''通过knn，删除噪声点；若周围所有点与自己类别不一致，则当前点为噪声点；
    并且，此方法仅针对多数类别的点，类别数太少，则全部保留；'''
    new_datas = []
    data_dict = {}
    for lng, lat, name in datas:
        data_dict.setdefault(name, [])
        data_dict[name].append([lng, lat, name])
    filter_datas = []
    filter_names = []
    for name, data_list in data_dict.items():
        if len(data_list) < size:
            new_datas.extend(data_list)
        else:
            filter_datas.append(data_list)
            filter_names.append(name)

    if len(filter_datas) > 1:
        new_datas.extend(remove_data(sum(filter_datas, [])))
    else:
        for data_list in filter_datas:
            new_datas.extend(data_list)
    return filter_names, new_datas

def load_data():
    with open(r'D:\Users\{}\Address\GPSConverter\lngLatVillageDict.json'.format(os.getenv('USERNAME')), 'r', encoding='utf-8')as f:
        lngLatVillageDict = json.load(f)

    for i, data in enumerate(lngLatVillageDict.values()):
        if i> 10:
            break
        name_list = [name for lnt, lat, name in data]
        ds = {name:name_list.count(name) for name in set(name_list)}
        if len(ds)>2:
            ds_sort = sorted(ds.items(), key=lambda x: x[1])
            if ds_sort[-2][1]>20:
                print(data)
                break
        # print(data)
        # print('-'*80)

def show_proba(all_data_list, filter_names, keep_raito=0.8):
    """
    对边界点进行展示；并对多数类非边界点进行删除；
    :param all_data_list:
    :param filter_names: 多数类别列表；
    :param keep_raito: 保留数据的比率；
    :return:
    """
    # all_data_list = [[121.49944513, 31.38812612, '海滨二村'], [121.49986066, 31.38739045, '海滨二村'], [121.498165, 31.386909, '海滨二村'], [121.497552, 31.388681, '海滨二村'], [121.499286, 31.384882, '海滨二村'], [121.497286, 31.388808, '海滨二村'], [121.497632, 31.386654, '海滨二村'], [121.496672, 31.388535, '海滨二村'], [121.497364, 31.387109, '海滨二村'], [121.49775813, 31.38580372, '海滨二村'], [121.4988028, 31.38628721, '海滨二村'], [121.49828772, 31.38633721, '海滨二村'], [121.49666633, 31.38807791, '海滨二村'], [121.49679418, 31.38853158, '海滨二村'], [121.49709369, 31.38872877, '海滨二村'], [121.49722117, 31.38854367, '海滨二村'], [121.4967803, 31.38838175, '海滨二村'], [121.49746268, 31.38659406, '海滨二村'], [121.49828005, 31.38698909, '海滨二村'], [121.49681698, 31.38779057, '海滨二村'], [121.49698029, 31.38786204, '海滨二村'], [121.49778871, 31.38728606, '海滨二村'], [121.49866967, 31.38516552, '海滨二村'], [121.49686071, 31.38815806, '海滨二村'], [121.49787512, 31.3870614, '海滨二村'], [121.49750868, 31.38769536, '海滨二村'], [121.49952087, 31.38555622, '海滨二村'], [121.49854762, 31.38597125, '海滨二村'], [121.49687725, 31.38766504, '海滨二村'], [121.49703455, 31.38773358, '海滨二村'], [121.49716207, 31.38751348, '海滨二村'], [121.49796749, 31.3878864, '海滨二村'], [121.49818185, 31.38797562, '海滨二村'], [121.49824348, 31.38747625, '海滨二村'], [121.49793996, 31.38637004, '海滨二村'], [121.49857799, 31.38665483, '海滨二村'], [121.49733812, 31.38786281, '海滨二村'], [121.49749999, 31.38537906, '海滨二村'], [121.4976833, 31.38547445, '海滨二村'], [121.49918114, 31.38566958, '海滨二村'], [121.49667412, 31.38830577, '海滨二村'], [121.49769928, 31.38851249, '海滨二村'], [121.49892753, 31.38679514, '海滨二村'], [121.49768022, 31.38753292, '海滨二村'], [121.49706212, 31.38722546, '海滨二村'], [121.4971906, 31.38704635, '海滨二村'], [121.49836768, 31.38752825, '海滨二村'], [121.49901786, 31.38663651, '海滨二村'], [121.49851415, 31.38537467, '海滨二村'], [121.49740026, 31.38886599, '海滨二村'], [121.49769458, 31.38820162, '海滨二村'], [121.49747218, 31.38810657, '海滨二村'], [121.49753859, 31.38784506, '海滨二村'], [121.498161, 31.386909, '海滨三村'], [121.497552, 31.388683, '海滨三村'], [121.499277, 31.38855, '海滨三村'], [121.499435, 31.388126, '海滨三村'], [121.49939635, 31.3888422, '海滨三村'], [121.49943513, 31.38812612, '海滨三村'], [121.49986066, 31.38734045, '海滨三村'], [121.49943116, 31.38909289, '海滨三村'], [121.49971323, 31.38751938, '海滨三村'], [121.49947311, 31.3872191, '海滨三村'], [121.4995861, 31.38742927, '海滨三村'], [121.49838077, 31.38946862, '海滨三村'], [121.49928596, 31.38902893, '海滨三村'], [121.49931673, 31.38931764, '海滨三村'], [121.499035, 31.38953361, '海滨三村'], [121.49919723, 31.38960142, '海滨三村'], [121.49933573, 31.38935449, '海滨三村'], [121.49946689, 31.38943056, '海滨三村'], [121.49912073, 31.38895614, '海滨三村'], [121.49965417, 31.38847552, '海滨三村'], [121.49973879, 31.38900381, '海滨三村'], [121.49988724, 31.38880988, '海滨三村'], [121.49944388, 31.38839399, '海滨三村'], [121.49941211, 31.38811129, '海滨三村'], [121.49890962, 31.38766404, '海滨三村'], [121.49904683, 31.38771101, '海滨三村'], [121.49914396, 31.38776529, '海滨三村'], [121.49984588, 31.38709461, '海滨三村'], [121.49969098, 31.38872521, '海滨三村'], [121.4999871, 31.38811142, '海滨三村'], [121.49849324, 31.38822307, '海滨三村'], [121.49882499, 31.38813155, '海滨三村'], [121.49878115, 31.38789094, '海滨三村'], [121.4989544, 31.38796562, '海滨三村'], [121.49951147, 31.38792465, '海滨三村'], [121.49957448, 31.38703245, '海滨三村'], [121.49953878, 31.38865926, '海滨三村'], [121.49979836, 31.38853854, '海滨三村'], [121.49975554, 31.38828089, '海滨三村'], [121.49991174, 31.38834685, '海滨三村'], [121.4995558, 31.38767941, '海滨三村'], [121.49954054, 31.38890519, '海滨三村'], [121.49907013, 31.38846364, '海滨三村'], [121.49951747, 31.3879316, '海滨三村'], [121.49853728, 31.38927744, '海滨三村'], [121.4988918, 31.38945969, '海滨三村'], [121.49824111, 31.38884091, '海滨三村'], [121.49832323, 31.38888924, '海滨三村'], [121.49855961, 31.38899435, '海滨三村'], [121.49843269, 31.38865043, '海滨三村'], [121.49867205, 31.38876954, '海滨三村'], [121.4999966, 31.38862322, '海滨三村'], [121.49932148, 31.3885738, '海滨三村'], [121.49842389, 31.38843656, '海滨三村'], [121.49969168, 31.38803439, '海滨三村'], [121.49864076, 31.38900472, '海滨三村'], [121.49879197, 31.38909154, '海滨三村'], [121.49887336, 31.38885599, '海滨三村']]

    data_dict = {}
    knn = neighbors.KNeighborsClassifier(n_neighbors=20)
    datas, labels = [], []
    for lng, lat, name in all_data_list:
        datas.append([lng, lat])
        labels.append(name)
    knn.fit(datas, labels)
    predictedLabel = knn.predict(datas)
    probabilities = knn.predict_proba(datas)
    remove_list = []
    for data, label, pred, probabilitie in zip(datas, labels, predictedLabel, probabilities):
        name = "{}_{}".format(label, str(max(probabilitie)))
        lng, lat = data
        if (max(probabilitie)==1 and label in filter_names and random.random()> keep_raito):
            remove_list.append([lng, lat, name])
        else:
            data_dict.setdefault(name, [])
            data_dict[name].append([lng, lat, max(probabilitie)])
    print(data_dict.keys())
    plt.figure()
    ax = plt.subplot(1, 1, 1)
    for name, X in data_dict.items():
        ax.scatter([x for x, y, _ in X], [y for x, y, _ in X], facecolors='r' if '二村' in name else 'b',
                   marker='.' if '1.0' in name else 'v')
    for lng, lat, name in remove_list:
        ax.scatter(lng, lat, facecolors='r' if '二村' in name else 'b',
                   marker='*')

    plt.show()

def main():
    datas = [[121.49944513, 31.38812612, '海滨二村'], [121.49986066, 31.38739045, '海滨二村'], [121.498161, 31.386909, '海滨三村'], [121.497552, 31.388683, '海滨三村'], [121.498165, 31.386909, '海滨二村'], [121.497552, 31.388681, '海滨二村'], [121.496789, 31.38086, '西朱新村'], [121.499277, 31.38855, '海滨三村'], [121.499286, 31.384882, '海滨二村'], [121.497286, 31.388808, '海滨二村'], [121.499435, 31.388126, '海滨三村'], [121.497632, 31.386654, '海滨二村'], [121.496672, 31.388535, '海滨二村'], [121.497364, 31.387109, '海滨二村'], [121.49939635, 31.3888422, '海滨三村'], [121.49775813, 31.38580372, '海滨二村'], [121.4992635, 31.38447131, '海滨新村'], [121.49944477, 31.38453102, '海滨新村'], [121.49992418, 31.38395694, '海滨新村'], [121.4988028, 31.38628721, '海滨二村'], [121.49943513, 31.38812612, '海滨三村'], [121.49986066, 31.38734045, '海滨三村'], [121.49828772, 31.38633721, '海滨二村'], [121.49666633, 31.38807791, '海滨二村'], [121.49804552, 31.38404479, '海滨新村'], [121.49931285, 31.38421903, '海滨新村'], [121.49974048, 31.38434605, '海滨新村'], [121.49999074, 31.38450036, '海滨新村'], [121.49679418, 31.38853158, '海滨二村'], [121.49709369, 31.38872877, '海滨二村'], [121.49722117, 31.38854367, '海滨二村'], [121.4967803, 31.38838175, '海滨二村'], [121.49979525, 31.3846656, '海滨新村'], [121.49746268, 31.38659406, '海滨二村'], [121.49828005, 31.38698909, '海滨二村'], [121.49681698, 31.38779057, '海滨二村'], [121.49698029, 31.38786204, '海滨二村'], [121.49943116, 31.38909289, '海滨三村'], [121.49971323, 31.38751938, '海滨三村'], [121.49947311, 31.3872191, '海滨三村'], [121.4995861, 31.38742927, '海滨三村'], [121.49778871, 31.38728606, '海滨二村'], [121.49838077, 31.38946862, '海滨三村'], [121.49974934, 31.38149675, '海滨新村'], [121.49866967, 31.38516552, '海滨二村'], [121.49686071, 31.38815806, '海滨二村'], [121.49787512, 31.3870614, '海滨二村'], [121.49949411, 31.38428374, '海滨新村'], [121.49897974, 31.38371258, '海滨新村'], [121.49838009, 31.38417105, '海滨新村'], [121.49928596, 31.38902893, '海滨三村'], [121.49931673, 31.38931764, '海滨三村'], [121.499035, 31.38953361, '海滨三村'], [121.49919723, 31.38960142, '海滨三村'], [121.49933573, 31.38935449, '海滨三村'], [121.49946689, 31.38943056, '海滨三村'], [121.49912073, 31.38895614, '海滨三村'], [121.49750868, 31.38769536, '海滨二村'], [121.49965417, 31.38847552, '海滨三村'], [121.49952087, 31.38555622, '海滨二村'], [121.49854762, 31.38597125, '海滨二村'], [121.49973879, 31.38900381, '海滨三村'], [121.49988724, 31.38880988, '海滨三村'], [121.49944388, 31.38839399, '海滨三村'], [121.49941211, 31.38811129, '海滨三村'], [121.49890962, 31.38766404, '海滨三村'], [121.49904683, 31.38771101, '海滨三村'], [121.49914396, 31.38776529, '海滨三村'], [121.49984588, 31.38709461, '海滨三村'], [121.49969098, 31.38872521, '海滨三村'], [121.4999871, 31.38811142, '海滨三村'], [121.49849324, 31.38822307, '海滨三村'], [121.49882499, 31.38813155, '海滨三村'], [121.49878115, 31.38789094, '海滨三村'], [121.4989544, 31.38796562, '海滨三村'], [121.49951147, 31.38792465, '海滨三村'], [121.49687725, 31.38766504, '海滨二村'], [121.49703455, 31.38773358, '海滨二村'], [121.49716207, 31.38751348, '海滨二村'], [121.49796749, 31.3878864, '海滨二村'], [121.49818185, 31.38797562, '海滨二村'], [121.49824348, 31.38747625, '海滨二村'], [121.49793996, 31.38637004, '海滨二村'], [121.49857799, 31.38665483, '海滨二村'], [121.49733812, 31.38786281, '海滨二村'], [121.49749999, 31.38537906, '海滨二村'], [121.4976833, 31.38547445, '海滨二村'], [121.49918114, 31.38566958, '海滨二村'], [121.49667412, 31.38830577, '海滨二村'], [121.49769928, 31.38851249, '海滨二村'], [121.49892753, 31.38679514, '海滨二村'], [121.49768022, 31.38753292, '海滨二村'], [121.49972711, 31.38269158, '海滨新村'], [121.49957448, 31.38703245, '海滨三村'], [121.49953878, 31.38865926, '海滨三村'], [121.49979836, 31.38853854, '海滨三村'], [121.49975554, 31.38828089, '海滨三村'], [121.49991174, 31.38834685, '海滨三村'], [121.4995558, 31.38767941, '海滨三村'], [121.49706212, 31.38722546, '海滨二村'], [121.4971906, 31.38704635, '海滨二村'], [121.49836768, 31.38752825, '海滨二村'], [121.49901786, 31.38663651, '海滨二村'], [121.49851415, 31.38537467, '海滨二村'], [121.49740026, 31.38886599, '海滨二村'], [121.49769458, 31.38820162, '海滨二村'], [121.49747218, 31.38810657, '海滨二村'], [121.49954054, 31.38890519, '海滨三村'], [121.49907013, 31.38846364, '海滨三村'], [121.49951747, 31.3879316, '海滨三村'], [121.49853728, 31.38927744, '海滨三村'], [121.4988918, 31.38945969, '海滨三村'], [121.49824111, 31.38884091, '海滨三村'], [121.49832323, 31.38888924, '海滨三村'], [121.49855961, 31.38899435, '海滨三村'], [121.49843269, 31.38865043, '海滨三村'], [121.49867205, 31.38876954, '海滨三村'], [121.4999966, 31.38862322, '海滨三村'], [121.49932148, 31.3885738, '海滨三村'], [121.49842389, 31.38843656, '海滨三村'], [121.49753859, 31.38784506, '海滨二村'], [121.49969168, 31.38803439, '海滨三村'], [121.49864076, 31.38900472, '海滨三村'], [121.49879197, 31.38909154, '海滨三村'], [121.49887336, 31.38885599, '海滨三村'], [121.49974193, 31.38289643, '海滨新村']]
    filter_names, new_datas = knn_remove_point(datas)
    show_datas(datas, datas2=new_datas)  # 对比删减噪声点前后的效果；
    show_proba(new_datas, filter_names)  # 展示删除噪声点后的边界点及对多数类数据进行随机删除；


if __name__ == '__main__':
    main()