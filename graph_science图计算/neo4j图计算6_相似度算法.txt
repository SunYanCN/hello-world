
相似度
相似性算法根据节点对的邻域或属性计算节点对的相似性。可以使用多个相似性指标来计算相似性分数。Neo4j GDS库包括以下相似性算法：
节点相似性
过滤后的节点相似性
K-最近邻
过滤后的 K 最近邻
###########################################################################################################################
节点相似性算法根据节点连接到的节点比较一组节点。
如果两个节点共享许多相同的邻居，则认为它们相似。节点相似性根据 Jaccard 度量（也称为 Jaccard 相似性得分）或重叠系数（也称为 Szymkiewicz-Simpson 系数）计算成对相似性。
给定两个集合 A 和 B，使用以下公式计算杰卡德相似性Jaccard Similarity ：
J(A,B) = (A∩B)/(A∪B)=(A∩B)/[A+B-(A∩B)]
第一步：创建样例数据
CREATE
  (alice:Person {name: 'Alice'}),
  (bob:Person {name: 'Bob'}),
  (carol:Person {name: 'Carol'}),
  (dave:Person {name: 'Dave'}),
  (eve:Person {name: 'Eve'}),
  (guitar:Instrument {name: 'Guitar'}),
  (synth:Instrument {name: 'Synthesizer'}),
  (bongos:Instrument {name: 'Bongos'}),
  (trumpet:Instrument {name: 'Trumpet'}),

  (alice)-[:LIKES]->(guitar),
  (alice)-[:LIKES]->(synth),
  (alice)-[:LIKES {strength: 0.5}]->(bongos),
  (bob)-[:LIKES]->(guitar),
  (bob)-[:LIKES]->(synth),
  (carol)-[:LIKES]->(bongos),
  (dave)-[:LIKES]->(guitar),
  (dave)-[:LIKES {strength: 1.5}]->(trumpet),
  (dave)-[:LIKES]->(bongos);

第二步：给属性图命名
CALL gds.graph.project(
    'myGraph',
    ['Person', 'Instrument'],
    {
        LIKES: {
            properties: {
                strength: {
                    property: 'strength',
                    defaultValue: 1.0
                }
            }
        }
    }
);

第三步：计算每个节点间相似度
CALL gds.nodeSimilarity.stream('myGraph')
YIELD node1, node2, similarity
RETURN gds.util.asNode(node1).name AS Person1, gds.util.asNode(node2).name AS Person2, similarity
ORDER BY similarity DESCENDING, Person1, Person2
╒═══════╤═══════╤══════════════════╕
│Person1│Person2│similarity        │
╞═══════╪═══════╪══════════════════╡
│"Alice"│"Bob"  │0.6666666666666666│
├───────┼───────┼──────────────────┤
│"Bob"  │"Alice"│0.6666666666666666│
├───────┼───────┼──────────────────┤
│"Alice"│"Dave" │0.5               │
├───────┼───────┼──────────────────┤
│"Dave" │"Alice"│0.5               │
├───────┼───────┼──────────────────┤
│"Alice"│"Carol"│0.3333333333333333│
├───────┼───────┼──────────────────┤
│"Carol"│"Alice"│0.3333333333333333│
├───────┼───────┼──────────────────┤
│"Carol"│"Dave" │0.3333333333333333│
├───────┼───────┼──────────────────┤
│"Dave" │"Carol"│0.3333333333333333│
├───────┼───────┼──────────────────┤
│"Bob"  │"Dave" │0.25              │
├───────┼───────┼──────────────────┤
│"Dave" │"Bob"  │0.25              │
└───────┴───────┴──────────────────┘

第四步：限制结果输出
TopK 和 bottomK 是对每个节点计算的分数数量的限制。
对于 topK，返回每个节点的最大相似性得分。对于 bottomK，返回每个节点的 K 最小相似性得分。
TopK 和 bottomK 不能为 0，结合使用，默认值为 10。如果两者都未指定，则使用 topK。

输出每个人最相似的人（无法计算相似度的除外，如孤立点）：
CALL gds.nodeSimilarity.stream('myGraph', { topK: 1 })
YIELD node1, node2, similarity
RETURN gds.util.asNode(node1).name AS Person1, gds.util.asNode(node2).name AS Person2, similarity
ORDER BY Person1
╒═══════╤═══════╤══════════════════╕
│Person1│Person2│similarity        │
╞═══════╪═══════╪══════════════════╡
│"Alice"│"Bob"  │0.6666666666666666│
├───────┼───────┼──────────────────┤
│"Bob"  │"Alice"│0.6666666666666666│
├───────┼───────┼──────────────────┤
│"Carol"│"Alice"│0.3333333333333333│
├───────┼───────┼──────────────────┤
│"Dave" │"Alice"│0.5               │
└───────┴───────┴──────────────────┘

输出每个人最不相似的人：
CALL gds.nodeSimilarity.stream('myGraph', { bottomK: 1 })
YIELD node1, node2, similarity
RETURN gds.util.asNode(node1).name AS Person1, gds.util.asNode(node2).name AS Person2, similarity
ORDER BY Person1
╒═══════╤═══════╤══════════════════╕
│Person1│Person2│similarity        │
╞═══════╪═══════╪══════════════════╡
│"Alice"│"Carol"│0.3333333333333333│
├───────┼───────┼──────────────────┤
│"Bob"  │"Dave" │0.25              │
├───────┼───────┼──────────────────┤
│"Carol"│"Alice"│0.3333333333333333│
├───────┼───────┼──────────────────┤
│"Dave" │"Bob"  │0.25              │
└───────┴───────┴──────────────────┘

在每个人最相似的数据中，取出得分最高的三个：
CALL gds.nodeSimilarity.stream('myGraph', { topK: 1, topN: 3 })
YIELD node1, node2, similarity
RETURN gds.util.asNode(node1).name AS Person1, gds.util.asNode(node2).name AS Person2, similarity
ORDER BY similarity DESC, Person1, Person2
╒═══════╤═══════╤══════════════════╕
│Person1│Person2│similarity        │
╞═══════╪═══════╪══════════════════╡
│"Alice"│"Bob"  │0.6666666666666666│
├───────┼───────┼──────────────────┤
│"Bob"  │"Alice"│0.6666666666666666│
├───────┼───────┼──────────────────┤
│"Dave" │"Alice"│0.5               │
└───────┴───────┴──────────────────┘

根据关系数进行限定,如度(关系数)小于3的不输出：
CALL gds.nodeSimilarity.stream('myGraph', { degreeCutoff: 3 })
YIELD node1, node2, similarity
RETURN gds.util.asNode(node1).name AS Person1, gds.util.asNode(node2).name AS Person2, similarity
ORDER BY Person1
╒═══════╤═══════╤══════════╕
│Person1│Person2│similarity│
╞═══════╪═══════╪══════════╡
│"Alice"│"Dave" │0.5       │
├───────┼───────┼──────────┤
│"Dave" │"Alice"│0.5       │
└───────┴───────┴──────────┘

根据相似度进行限定，如：相似度小于0.5的不输出：
CALL gds.nodeSimilarity.stream('myGraph', { similarityCutoff: 0.5 })
YIELD node1, node2, similarity
RETURN gds.util.asNode(node1).name AS Person1, gds.util.asNode(node2).name AS Person2, similarity
ORDER BY Person1
╒═══════╤═══════╤══════════════════╕
│Person1│Person2│similarity        │
╞═══════╪═══════╪══════════════════╡
│"Alice"│"Bob"  │0.6666666666666666│
├───────┼───────┼──────────────────┤
│"Alice"│"Dave" │0.5               │
├───────┼───────┼──────────────────┤
│"Bob"  │"Alice"│0.6666666666666666│
├───────┼───────┼──────────────────┤
│"Dave" │"Alice"│0.5               │
└───────┴───────┴──────────────────┘

考虑边权重：
CALL gds.nodeSimilarity.stream('myGraph', { relationshipWeightProperty: 'strength', similarityCutoff: 0.3 })
YIELD node1, node2, similarity
RETURN gds.util.asNode(node1).name AS Person1, gds.util.asNode(node2).name AS Person2, similarity
ORDER BY Person1
╒═══════╤═══════╤══════════════════╕
│Person1│Person2│similarity        │
╞═══════╪═══════╪══════════════════╡
│"Alice"│"Bob"  │0.8               │
├───────┼───────┼──────────────────┤
│"Alice"│"Dave" │0.3333333333333333│
├───────┼───────┼──────────────────┤
│"Bob"  │"Alice"│0.8               │
├───────┼───────┼──────────────────┤
│"Dave" │"Alice"│0.3333333333333333│
└───────┴───────┴──────────────────┘

###########################################################################################################################
过滤节点相似性算法是节点相似性算法的扩展。它添加了对源节点和/或目标节点进行筛选的支持。
第一步：创建样例数据
CREATE
  (alice:Person:Singer {name: 'Alice'}),
  (bob:Person:Singer {name: 'Bob'}),
  (carol:Person:Singer {name: 'Carol'}),
  (dave:Person {name: 'Dave'}),
  (eve:Person:Singer {name: 'Eve'}),
  (guitar:Instrument {name: 'Guitar'}),
  (synth:Instrument {name: 'Synthesizer'}),
  (bongos:Instrument {name: 'Bongos'}),
  (trumpet:Instrument {name: 'Trumpet'}),

  (alice)-[:LIKES]->(guitar),
  (alice)-[:LIKES]->(synth),
  (alice)-[:LIKES {strength: 0.5}]->(bongos),
  (bob)-[:LIKES]->(guitar),
  (bob)-[:LIKES]->(synth),
  (carol)-[:LIKES]->(bongos),
  (dave)-[:LIKES]->(guitar),
  (dave)-[:LIKES]->(synth),
  (dave)-[:LIKES]->(bongos);

第二步：给属性图命名
CALL gds.graph.project(
    'myGraph',
    ['Person', 'Instrument','Singer'],
    {
        LIKES: {
            properties: {
                strength: {
                    property: 'strength',
                    defaultValue: 1.0
                }
            }
        }
    }
);

第三步：使用节点过滤计算相似度
CALL gds.alpha.nodeSimilarity.filtered.stream('myGraph', {sourceNodeFilter:'Singer' , targetNodeFilter:'Singer' } )
YIELD node1, node2, similarity
RETURN gds.util.asNode(node1).name AS Person1, gds.util.asNode(node2).name AS Person2, similarity
ORDER BY similarity DESCENDING, Person1, Person2
╒═══════╤═══════╤══════════════════╕
│Person1│Person2│similarity        │
╞═══════╪═══════╪══════════════════╡
│"Alice"│"Bob"  │0.6666666666666666│
├───────┼───────┼──────────────────┤
│"Bob"  │"Alice"│0.6666666666666666│
├───────┼───────┼──────────────────┤
│"Alice"│"Carol"│0.3333333333333333│
├───────┼───────┼──────────────────┤
│"Carol"│"Alice"│0.3333333333333333│
└───────┴───────┴──────────────────┘

# 计算指定id节点的相似性：
CALL gds.alpha.nodeSimilarity.filtered.stream('myGraph', {sourceNodeFilter:[65,66] , targetNodeFilter:'Singer' } )
YIELD node1, node2, similarity
RETURN gds.util.asNode(node1).name AS Person1, id(gds.util.asNode(node1)) AS uid, gds.util.asNode(node2).name AS Person2, similarity
ORDER BY similarity DESCENDING, Person1, Person2
╒═══════╤═══╤═══════╤══════════════════╕
│Person1│uid│Person2│similarity        │
╞═══════╪═══╪═══════╪══════════════════╡
│"Bob"  │65 │"Alice"│0.6666666666666666│
├───────┼───┼───────┼──────────────────┤
│"Carol"│66 │"Alice"│0.3333333333333333│
└───────┴───┴───────┴──────────────────┘


###########################################################################################################################
K 最近邻算法计算图形中所有节点对的距离值，并在每个节点与其 k 个最近邻之间创建新关系。距离是根据节点属性计算的。
该算法的输入是齐次图。图形不需要连接，事实上，节点之间的现有关系将被忽略 - 如果使用初始采样选项，则除了随机游走采样。在每个节点与其 k 个最近邻之间创建新关系。
K 最近邻算法比较每个节点的给定属性。这些属性最相似的 k 节点是 k 最近邻。
初始邻居集是随机选择的，并在多次迭代中验证和优化。迭代次数受配置参数 maxIterations 的限制。如果邻居列表仅更改少量，则算法可能会提前停止，这可以通过配置参数 deltaThreshold 进行控制。
第一步：创建样例数据
CREATE
(:City {name: '广东', gdp:  30178.23, tb: 4.0, coordinates: [113.266887,23.133306]}),
(:City {name: '江苏', gdp:  29401.7, tb: 4.7, coordinates: [118.763563,32.061377]}),
(:City {name: '山东', gdp:  20411, tb: 4.7, coordinates: [117.020725,36.670201]}),
(:City {name: '浙江', gdp:  18925, tb: 4.9, coordinates: [120.152575,30.266619]}),
(:City {name: '河南', gdp:  14968.97, tb: 5.0, coordinates: [113.753094,34.767052]}),
(:City {name: '四川', gdp:  13374.7, tb: 3.8, coordinates: [104.076452,30.651696]}),
(:City {name: '福建', gdp:  12061.86, tb: 1.7, coordinates: [119.296194,26.101082]}),
(:City {name: '湖北', gdp:  11899.72, tb: 5.1, coordinates: [114.341552,30.546222]}),
(:City {name: '湖南', gdp:  11659.85, tb: 4.1, coordinates: [112.982951,28.116007]}),
(:City {name: '安徽', gdp:  10936.2, tb: 4.8, coordinates: [117.330139,31.734559]}),
(:City {name: '上海', gdp:  10536.22, tb: 3.0, coordinates: [121.473667,31.230525]}),
(:City {name: '河北', gdp:  10041.4, tb: 5.1, coordinates: [114.530399,38.037707]}),
(:City {name: '北京', gdp:  9947.7, tb: 3.1, coordinates: [116.407387,39.904179]}),
(:City {name: '陕西', gdp:  7651.9, tb: 5.3, coordinates: [108.953939,34.266611]}),
(:City {name: '江西', gdp:  7320.7, tb: 1.2, coordinates: [115.816587,28.637234]}),
(:City {name: '重庆', gdp:  6932.89, tb: 4.7, coordinates: [106.550483,29.563707]}),
(:City {name: '云南', gdp:  6852.16, tb: 4.8, coordinates: [102.709372,25.046432]}),
(:City {name: '辽宁', gdp:  6661.4, tb: 4.7, coordinates: [123.435093,41.836743]}),
(:City {name: '广西', gdp:  6250.83, tb: 4.9, coordinates: [108.327537,22.816659]}),
(:City {name: '山西', gdp:  5824.33, tb: 5.0, coordinates: [112.578781,37.813948]}),
(:City {name: '内蒙古', gdp:  5344, tb: 5.6, coordinates: [111.765226,40.818233]}),
(:City {name: '贵州', gdp:  4939.77, tb: 2.5, coordinates: [106.705251,26.600328]}),
(:City {name: '新疆', gdp:  4149.52, tb: 4.9, coordinates: [87.628579,43.793301]}),
(:City {name: '天津', gdp:  3715.38, tb: 5.5, coordinates: [117.201509,39.085318]}),
(:City {name: '黑龙江', gdp:  3104.4, tb: 5.1, coordinates: [126.661998,45.742253]}),
(:City {name: '吉林', gdp:  2833.88, tb: 8.2, coordinates: [125.325802,43.896942]}),
(:City {name: '甘肃', gdp:  2670.7, tb: 6.7, coordinates: [103.826777,36.060634]}),
(:City {name: '海南', gdp:  1775.96, tb: 6.8, coordinates: [110.348781,20.018639]}),
(:City {name: '宁夏', gdp:  1206.76, tb: 7.5, coordinates: [106.258889,38.472273]}),
(:City {name: '青海', gdp:  888.93, tb: 5.1, coordinates: [101.780482,36.622538]}),
(:City {name: '西藏', gdp:  575.87, tb: 8.2, coordinates: [91.117449,29.648694]});

第二步：给属性图命名
CALL gds.graph.project(
    'myGraph',
    {
        City: {
            properties: ['gdp','tb','coordinates']
        }
    },
    '*'
);

第三步：获取城市GDP相似度
CALL gds.knn.stream('myGraph', {
    topK: 1,
    nodeProperties: ['gdp'],
    // 设置以下参数以产生确定性结果
    randomSeed: 1337,
    concurrency: 1,
    sampleRate: 1.0,
    deltaThreshold: 0.0
})
YIELD node1, node2, similarity
RETURN gds.util.asNode(node1).name AS Person1, gds.util.asNode(node2).name AS Person2, similarity
ORDER BY similarity DESCENDING, Person1, Person2;
╒═══════╤═══════╤══════════════════════╕
│Person1│Person2│similarity            │
╞═══════╪═══════╪══════════════════════╡
│"云南"   │"重庆"   │0.012235409274440159  │
├───────┼───────┼──────────────────────┤
│"重庆"   │"云南"   │0.012235409274440159  │
├───────┼───────┼──────────────────────┤
│"北京"   │"河北"   │0.010559662090813215  │
├───────┼───────┼──────────────────────┤
│"河北"   │"北京"   │0.010559662090813215  │
├───────┼───────┼──────────────────────┤
│"湖北"   │"福建"   │0.0061297045482407286 │
├───────┼───────┼──────────────────────┤
│"福建"   │"湖北"   │0.0061297045482407286 │
├───────┼───────┼──────────────────────┤
│"吉林"   │"甘肃"   │0.0060908758679498005 │
├───────┼───────┼──────────────────────┤
│"甘肃"   │"吉林"   │0.0060908758679498005 │
├───────┼───────┼──────────────────────┤
│"湖南"   │"湖北"   │0.004151617054842879  │
├───────┼───────┼──────────────────────┤
│"黑龙江"  │"吉林"   │0.003682969946965233  │
├───────┼───────┼──────────────────────┤
│"辽宁"   │"重庆"   │0.0036698594443832708 │
├───────┼───────┼──────────────────────┤
│"西藏"   │"青海"   │0.00318410494809909   │
├───────┼───────┼──────────────────────┤
│"青海"   │"西藏"   │0.00318410494809909   │
├───────┼───────┼──────────────────────┤
│"宁夏"   │"青海"   │0.0031364677100649244 │
├───────┼───────┼──────────────────────┤
│"江西"   │"陕西"   │0.0030102347983142702 │
├───────┼───────┼──────────────────────┤
│"陕西"   │"江西"   │0.0030102347983142702 │
├───────┼───────┼──────────────────────┤
│"上海"   │"安徽"   │0.002493889969574534  │
├───────┼───────┼──────────────────────┤
│"安徽"   │"上海"   │0.002493889969574534  │
├───────┼───────┼──────────────────────┤
│"内蒙古"  │"贵州"   │0.002467734373072085  │
├───────┼───────┼──────────────────────┤
│"贵州"   │"内蒙古"  │0.002467734373072085  │
├───────┼───────┼──────────────────────┤
│"广西"   │"辽宁"   │0.002429720339188961  │
├───────┼───────┼──────────────────────┤
│"山西"   │"广西"   │0.0023391812865497076 │
├───────┼───────┼──────────────────────┤
│"天津"   │"新疆"   │0.0022981109527967993 │
├───────┼───────┼──────────────────────┤
│"新疆"   │"天津"   │0.0022981109527967993 │
├───────┼───────┼──────────────────────┤
│"海南"   │"宁夏"   │0.0017537706068046297 │
├───────┼───────┼──────────────────────┤
│"广东"   │"江苏"   │0.0012861240080768606 │
├───────┼───────┼──────────────────────┤
│"江苏"   │"广东"   │0.0012861240080768606 │
├───────┼───────┼──────────────────────┤
│"四川"   │"福建"   │0.0007611276867807343 │
├───────┼───────┼──────────────────────┤
│"山东"   │"浙江"   │0.0006724949562878278 │
├───────┼───────┼──────────────────────┤
│"浙江"   │"山东"   │0.0006724949562878278 │
├───────┼───────┼──────────────────────┤
│"河南"   │"福建"   │0.00034386594729910505│
└───────┴───────┴──────────────────────┘

# 根据多个指标计算相似性
CALL gds.knn.stream('myGraph', {
    topK: 1,
    nodeProperties: [
        {coordinates: "EUCLIDEAN"},
        'gdp',
        {tb: "OVERLAP"}
    ],
    randomSeed: 1337,
    concurrency: 1,
    sampleRate: 1.0,
    deltaThreshold: 0.0
})
YIELD node1, node2, similarity
RETURN gds.util.asNode(node1).name AS Person1, gds.util.asNode(node2).name AS Person2, similarity
ORDER BY similarity DESCENDING, Person1, Person2
╒═══════╤═══════╤═══════════════════╕
│Person1│Person2│similarity         │
╞═══════╪═══════╪═══════════════════╡
│"安徽"   │"江苏"   │0.40848305825872583│
├───────┼───────┼───────────────────┤
│"江苏"   │"安徽"   │0.40848305825872583│
├───────┼───────┼───────────────────┤
│"山西"   │"河北"   │0.37171223064295295│
├───────┼───────┼───────────────────┤
│"河北"   │"山西"   │0.37171223064295295│
├───────┼───────┼───────────────────┤
│"河南"   │"山西"   │0.36195120548120613│
├───────┼───────┼───────────────────┤
│"山东"   │"江苏"   │0.34655671425324336│
├───────┼───────┼───────────────────┤
│"湖北"   │"河北"   │0.3393443971633727 │
├───────┼───────┼───────────────────┤
│"辽宁"   │"江苏"   │0.33616375876597154│
├───────┼───────┼───────────────────┤
│"重庆"   │"江苏"   │0.3354794869862783 │
├───────┼───────┼───────────────────┤
│"黑龙江"  │"河北"   │0.3349875271056147 │
├───────┼───────┼───────────────────┤
│"云南"   │"安徽"   │0.33469946393866495│
├───────┼───────┼───────────────────┤
│"青海"   │"黑龙江"  │0.3339577063322438 │
├───────┼───────┼───────────────────┤
│"广西"   │"新疆"   │0.3338752659934238 │
├───────┼───────┼───────────────────┤
│"新疆"   │"广西"   │0.3338752659934238 │
├───────┼───────┼───────────────────┤
│"吉林"   │"西藏"   │0.33372345173419043│
├───────┼───────┼───────────────────┤
│"西藏"   │"吉林"   │0.33372345173419043│
├───────┼───────┼───────────────────┤
│"浙江"   │"新疆"   │0.3336243232683957 │
├───────┼───────┼───────────────────┤
│"广东"   │"湖南"   │0.31591437630193475│
├───────┼───────┼───────────────────┤
│"湖南"   │"广东"   │0.31591437630193475│
├───────┼───────┼───────────────────┤
│"内蒙古"  │"天津"   │0.3131684434444828 │
├───────┼───────┼───────────────────┤
│"天津"   │"内蒙古"  │0.3131684434444828 │
├───────┼───────┼───────────────────┤
│"上海"   │"北京"   │0.3068669328087112 │
├───────┼───────┼───────────────────┤
│"北京"   │"上海"   │0.3068669328087112 │
├───────┼───────┼───────────────────┤
│"海南"   │"甘肃"   │0.30451028833020627│
├───────┼───────┼───────────────────┤
│"甘肃"   │"海南"   │0.30451028833020627│
├───────┼───────┼───────────────────┤
│"陕西"   │"湖北"   │0.28545484164974805│
├───────┼───────┼───────────────────┤
│"江西"   │"福建"   │0.23935177201636104│
├───────┼───────┼───────────────────┤
│"福建"   │"江西"   │0.23935177201636104│
├───────┼───────┼───────────────────┤
│"贵州"   │"上海"   │0.22366751619641378│
├───────┼───────┼───────────────────┤
│"四川"   │"重庆"   │0.21562897525285216│
├───────┼───────┼───────────────────┤
│"宁夏"   │"甘肃"   │0.21159518156180943│
└───────┴───────┴───────────────────┘

###########################################################################################################################
过滤后的 K 最近邻
第一步：创建数据
数据同k最近邻数据，但将直辖市添加上个标签
match (n:City) where n.name in ['北京', '上海', '重庆', '天津'] set n:City:Label1 return n;

第二步：给属性图命名
CALL gds.graph.project(
    'myGraph',
    {
        Label1: {
            properties: ['gdp','tb','coordinates']
        },
        City: {
            properties: ['gdp']
        }
    },
    '*'
);

第三步：根据标签进行过滤，输出k近邻
CALL gds.alpha.knn.filtered.stream('myGraph', {
    topK: 1,
    nodeProperties: ['gdp'],
    sourceNodeFilter: 'Label1',
    seedTargetNodes: true,
    similarityCutoff: 0.3,
    randomSeed: 1337,
    concurrency: 1,
    sampleRate: 1.0,
    deltaThreshold: 0.0
})
YIELD node1, node2, similarity
RETURN gds.util.asNode(node1).name AS Person1, gds.util.asNode(node2).name AS Person2, similarity
ORDER BY similarity DESCENDING, Person1, Person2
╒═══════╤═══════╤═════════════════════╕
│Person1│Person2│similarity           │
╞═══════╪═══════╪═════════════════════╡
│"重庆"   │"云南"   │0.012235409274440159 │
├───────┼───────┼─────────────────────┤
│"北京"   │"河北"   │0.010559662090813215 │
├───────┼───────┼─────────────────────┤
│"上海"   │"安徽"   │0.002493889969574534 │
├───────┼───────┼─────────────────────┤
│"天津"   │"新疆"   │0.0022981109527967993│
└───────┴───────┴─────────────────────┘

###########################################################################################################################

相似度函数
相似性函数可分为两组。第一种是分类（categorical ）度量，它将数组视为集合，并根据两个集合之间的交集计算相似性。第二种是数值（numerical ）度量，它根据每个位置的数字彼此接近的程度来计算相似性。
分类（categorical ）度量，包括：gds.similarity.jaccard、gds.similarity.overlap，待计算数组长度可以不同
数值（numerical ）度量，包括：gds.similarity.cosine、gds.similarity.pearson、gds.similarity.euclideanDistance、gds.similarity.euclidean，待计算数组长度必须要求相同

RETURN gds.similarity.jaccard(
  [1.0, 5.0, 3.0],
  [5.0, 2.5, 3.00, 9.0]
) AS jaccardSimilarity
╒═════════════════╕
│jaccardSimilarity│
╞═════════════════╡
│0.4              │
└─────────────────┘

RETURN gds.similarity.overlap(
  [1.0, 5.0, 3.0],
  [5.0, 2.5, 3.00, 9.0]
) AS overlapSimilarity
╒══════════════════╕
│overlapSimilarity │
╞══════════════════╡
│0.6666666666666666│
└──────────────────┘

###########################################################################################################################
数值（numerical ）度量相似度，包括：gds.similarity.cosine、gds.similarity.pearson、gds.similarity.euclideanDistance、gds.similarity.euclidean

RETURN gds.similarity.cosine(
  [1.0, 5.0, 3.0, 6.7],
  [5.0, 2.5, 3.1, 9.0]
) AS cosineSimilarity
╒═════════════════╕
│cosineSimilarity │
╞═════════════════╡
│0.882757381034594│
└─────────────────┘

RETURN gds.similarity.pearson(
  [1.0, 5.0, 3.0, 6.7],
  [5.0, 2.5, 3.1, 9.0]
) AS pearsonSimilarity
╒═══════════════════╕
│pearsonSimilarity  │
╞═══════════════════╡
│0.46827748364811284│
└───────────────────┘


RETURN gds.similarity.euclidean(
  [1.0, 5.0, 3.0, 6.7],
  [5.0, 2.5, 3.1, 9.0]
)  AS euclideanSimilarity
╒═══════════════════╕
│euclideanSimilarity│
╞═══════════════════╡
│0.160030485454022  │
└───────────────────┘


RETURN gds.similarity.euclideanDistance(
  [1.0, 5.0, 3.0, 6.7],
  [5.0, 2.5, 3.1, 9.0]
) AS euclideanDistance
╒═════════════════╕
│euclideanDistance│
╞═════════════════╡
│5.248809388804284│
└─────────────────┘

###########################################################################################################################
当提供的向量中的一个或多个值为 null 时，这些函数还可以计算结果。对于基于交集的函数（如 Jaccard 或 Overlap），空值将从集合和计算中排除。在其余函数中，null 值将替换为 0.0 值。

RETURN gds.similarity.jaccard(
  [1.0, null, 3.0],
  [1.0, 2.0, 3.0]
) AS jaccardSimilarity
╒══════════════════╕
│jaccardSimilarity │
╞══════════════════╡
│0.6666666666666666│
└──────────────────┘


RETURN gds.similarity.cosine(
  [1.0, null, 3.0],
  [1.0, 2.0, 3.0]
) AS cosineSimilarity
╒══════════════════╕
│cosineSimilarity  │
╞══════════════════╡
│0.8451542547285166│
└──────────────────┘
